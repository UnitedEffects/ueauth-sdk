/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { WriteEventStreamProviderMasterStream } from './write-event-stream-provider-master-stream';
/**
 * 
 * @export
 * @interface WriteEventStreamProvider
 */
export interface WriteEventStreamProvider {
    /**
     * 
     * @type {string}
     * @memberof WriteEventStreamProvider
     */
    type?: WriteEventStreamProviderTypeEnum;
    /**
     * should an oauth client be created for this configuration?
     * @type {boolean}
     * @memberof WriteEventStreamProvider
     */
    oauthRequired?: boolean;
    /**
     * if there are specific authorizations required beyond ueauth for the interface, add them here. Not all of the examples are applicable to the providers offered. Please note that if you specific 'oauthRequired' the following values will be overwritten if you provide them in this object - clientId, audience, scope, rootRef, issueUrl
     * @type {any}
     * @memberof WriteEventStreamProvider
     */
    auth?: any;
    /**
     * 
     * @type {string}
     * @memberof WriteEventStreamProvider
     */
    adminUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof WriteEventStreamProvider
     */
    streamUrl?: string;
    /**
     * when this is active, an AG admin can turn on event streaming but is unable to deactivate without a root user
     * @type {boolean}
     * @memberof WriteEventStreamProvider
     */
    lockStreamingOnceActive?: boolean;
    /**
     * if active, every message sent is validated for correct schema
     * @type {boolean}
     * @memberof WriteEventStreamProvider
     */
    enableValidation?: boolean;
    /**
     * if you are using an external json schema provider to validate schema. only applicable if enableValidation is set to true
     * @type {string}
     * @memberof WriteEventStreamProvider
     */
    externalEventBodySchemaUrl?: string;
    /**
     * will calls to the REST API require a client_credential token?
     * @type {boolean}
     * @memberof WriteEventStreamProvider
     */
    restAuth?: boolean;
    /**
     * will publishing events require a client_credential token?
     * @type {boolean}
     * @memberof WriteEventStreamProvider
     */
    streamAuth?: boolean;
    /**
     * if specific scopes are required for the client credential authorizer add them here as space delimited strings
     * @type {string}
     * @memberof WriteEventStreamProvider
     */
    authScopes?: string;
    /**
     * will you need auth to publish to the master stream?
     * @type {boolean}
     * @memberof WriteEventStreamProvider
     */
    masterAuth?: boolean;
    /**
     * 
     * @type {WriteEventStreamProviderMasterStream}
     * @memberof WriteEventStreamProvider
     */
    masterStream?: WriteEventStreamProviderMasterStream;
    /**
     * any initialization configs required for the specific streaming solution - see documentation
     * @type {any}
     * @memberof WriteEventStreamProvider
     */
    setupConfig?: any;
    /**
     * any client configurations required for the specific streaming solution - see documentation
     * @type {any}
     * @memberof WriteEventStreamProvider
     */
    clientConfig?: any;
}

/**
    * @export
    * @enum {string}
    */
export enum WriteEventStreamProviderTypeEnum {
    Pulsar = 'pulsar',
    Nats = 'nats'
}

