/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { WriteOrganizationAccess } from './write-organization-access';
import { WriteOrganizationSso } from './write-organization-sso';
/**
 * An organization is a tenant within an AuthGroup
 * @export
 * @interface WriteOrganization
 */
export interface WriteOrganization {
    /**
     * If an external system manages sales/billing of organizations, you can link with this
     * @type {string}
     * @memberof WriteOrganization
     */
    externalId?: string;
    /**
     * human readable word that represents the organization - e.g. slug
     * @type {string}
     * @memberof WriteOrganization
     */
    alias?: string;
    /**
     * organization name
     * @type {string}
     * @memberof WriteOrganization
     */
    name: string;
    /**
     * brief overview of the org in question
     * @type {string}
     * @memberof WriteOrganization
     */
    description: string;
    /**
     * what kind of organization is this?
     * @type {string}
     * @memberof WriteOrganization
     */
    type?: WriteOrganizationTypeEnum;
    /**
     * full name of the contact
     * @type {string}
     * @memberof WriteOrganization
     */
    contactName?: string;
    /**
     * 
     * @type {string}
     * @memberof WriteOrganization
     */
    contactAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof WriteOrganization
     */
    contactPhone?: string;
    /**
     * 
     * @type {string}
     * @memberof WriteOrganization
     */
    contactEmail: string;
    /**
     * toggle restrictions on email domains in emailDomain list
     * @type {boolean}
     * @memberof WriteOrganization
     */
    restrictEmailDomains?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof WriteOrganization
     */
    emailDomains?: Array<string>;
    /**
     * 
     * @type {WriteOrganizationAccess}
     * @memberof WriteOrganization
     */
    access?: WriteOrganizationAccess;
    /**
     * When this is set to true, any Organization User Profile creation or update events result in a notification to the associated Account (user)
     * @type {boolean}
     * @memberof WriteOrganization
     */
    profileNotifications?: boolean;
    /**
     * when true, all other login options are removed from the screen in favor of the sso option provided
     * @type {boolean}
     * @memberof WriteOrganization
     */
    ssoLimit?: boolean;
    /**
     * when true, a user logging in to a product with org specified is automatically added to the organization, assuming email domain restrictions do not prevent the add
     * @type {boolean}
     * @memberof WriteOrganization
     */
    ssoAddAccountToOrg?: boolean;
    /**
     * this is a unique SSO email domain for the organization
     * @type {string}
     * @memberof WriteOrganization
     */
    ssoEmailDomain?: string;
    /**
     * 
     * @type {WriteOrganizationSso}
     * @memberof WriteOrganization
     */
    sso?: WriteOrganizationSso;
    /**
     * additional custom structured information
     * @type {string}
     * @memberof WriteOrganization
     */
    meta?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WriteOrganizationTypeEnum {
    External = 'external',
    Customer = 'customer',
    Internal = 'internal',
    Other = 'other'
}

