/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse2009 } from '../models';
import { InlineResponse2013 } from '../models';
import { WriteOrgUserProfile } from '../models';
/**
 * OrganizationUserProfilesApi - axios parameter creator
 * @export
 */
export const OrganizationUserProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This will return only the Profile information and not any Account information associated to the record except the Account ID or other information mirrored.
         * @summary Retrieve an Organization User Profile
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgProfile: async (group: string, org: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgProfile.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgProfile.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOrgProfile.');
            }
            const localVarPath = `/api/{group}/organization/{org}/profile/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Return and/or filter every Organization specific User Profile defined for this Organization.
         * @summary Query all of the Organization User Profiles in an Organization
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {string} [skip] oData skip Query
         * @param {string} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgProfiles: async (group: string, org: string, filter?: string, select?: string, orderby?: string, skip?: string, top?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgProfiles.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgProfiles.');
            }
            const localVarPath = `/api/{group}/organization/{org}/profiles`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will delete the Organization User Profile but not change or update either the Account or Secured Profile (pending) in any way.
         * @summary Completel remove an Organization User Profile
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrgProfile: async (group: string, org: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling removeOrgProfile.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling removeOrgProfile.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeOrgProfile.');
            }
            const localVarPath = `/api/{group}/organization/{org}/profile/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will change values of the Organization User Profile assocaited to the Account within a specified Organization. This will not update any information on the Account's Secured Profile.
         * @summary Update an Organization User Profile (name, contact info, bio, etc.) for an Account associated to this Organization
         * @param {Array<any>} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrgProfile: async (body: Array<any>, group: string, org: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrgProfile.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling updateOrgProfile.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling updateOrgProfile.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateOrgProfile.');
            }
            const localVarPath = `/api/{group}/organization/{org}/profile/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * While Accounts themselves do not carry personal information, two concepts in UE Auth do: Secured Profiles and Organization User Profiles (as described here). Organizations may need to define information about their users such as first and last name, address, or other data over which they wish to have a measure of control. This data is limited in scope to the Organization itself and access is limited to Organization administrators or the Account holder. As such, Organization User Profiles are unique only to the Organization but reference a single unique Account in the AuthGroup. One Account could have as many Organization User Profiles as there are Organizations to which the Account has been given access. In contrast, Secured Profiles are entirely controlled by the Account holder (user) and not accessible by anyone other than that user. Secured Profile data can be requested but must always be actively approved and provided or denied by the User. In future iterations, it will be possible to request an Organization User Profile be seeded from a Secured Profile.
         * @summary Create an Organization User Profile (name, contact info, bio, etc.) for an Account associated to this Organization
         * @param {WriteOrgUserProfile} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeOrgProfile: async (body: WriteOrgUserProfile, group: string, org: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling writeOrgProfile.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling writeOrgProfile.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling writeOrgProfile.');
            }
            const localVarPath = `/api/{group}/organization/{org}/profiles`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationUserProfilesApi - functional programming interface
 * @export
 */
export const OrganizationUserProfilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This will return only the Profile information and not any Account information associated to the record except the Account ID or other information mirrored.
         * @summary Retrieve an Organization User Profile
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgProfile(group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2013>>> {
            const localVarAxiosArgs = await OrganizationUserProfilesApiAxiosParamCreator(configuration).getOrgProfile(group, org, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return and/or filter every Organization specific User Profile defined for this Organization.
         * @summary Query all of the Organization User Profiles in an Organization
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {string} [skip] oData skip Query
         * @param {string} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgProfiles(group: string, org: string, filter?: string, select?: string, orderby?: string, skip?: string, top?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await OrganizationUserProfilesApiAxiosParamCreator(configuration).getOrgProfiles(group, org, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This will delete the Organization User Profile but not change or update either the Account or Secured Profile (pending) in any way.
         * @summary Completel remove an Organization User Profile
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeOrgProfile(group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2013>>> {
            const localVarAxiosArgs = await OrganizationUserProfilesApiAxiosParamCreator(configuration).removeOrgProfile(group, org, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This will change values of the Organization User Profile assocaited to the Account within a specified Organization. This will not update any information on the Account's Secured Profile.
         * @summary Update an Organization User Profile (name, contact info, bio, etc.) for an Account associated to this Organization
         * @param {Array<any>} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrgProfile(body: Array<any>, group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2013>>> {
            const localVarAxiosArgs = await OrganizationUserProfilesApiAxiosParamCreator(configuration).updateOrgProfile(body, group, org, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * While Accounts themselves do not carry personal information, two concepts in UE Auth do: Secured Profiles and Organization User Profiles (as described here). Organizations may need to define information about their users such as first and last name, address, or other data over which they wish to have a measure of control. This data is limited in scope to the Organization itself and access is limited to Organization administrators or the Account holder. As such, Organization User Profiles are unique only to the Organization but reference a single unique Account in the AuthGroup. One Account could have as many Organization User Profiles as there are Organizations to which the Account has been given access. In contrast, Secured Profiles are entirely controlled by the Account holder (user) and not accessible by anyone other than that user. Secured Profile data can be requested but must always be actively approved and provided or denied by the User. In future iterations, it will be possible to request an Organization User Profile be seeded from a Secured Profile.
         * @summary Create an Organization User Profile (name, contact info, bio, etc.) for an Account associated to this Organization
         * @param {WriteOrgUserProfile} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeOrgProfile(body: WriteOrgUserProfile, group: string, org: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2013>>> {
            const localVarAxiosArgs = await OrganizationUserProfilesApiAxiosParamCreator(configuration).writeOrgProfile(body, group, org, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationUserProfilesApi - factory interface
 * @export
 */
export const OrganizationUserProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This will return only the Profile information and not any Account information associated to the record except the Account ID or other information mirrored.
         * @summary Retrieve an Organization User Profile
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgProfile(group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>> {
            return OrganizationUserProfilesApiFp(configuration).getOrgProfile(group, org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return and/or filter every Organization specific User Profile defined for this Organization.
         * @summary Query all of the Organization User Profiles in an Organization
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {string} [skip] oData skip Query
         * @param {string} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgProfiles(group: string, org: string, filter?: string, select?: string, orderby?: string, skip?: string, top?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return OrganizationUserProfilesApiFp(configuration).getOrgProfiles(group, org, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * This will delete the Organization User Profile but not change or update either the Account or Secured Profile (pending) in any way.
         * @summary Completel remove an Organization User Profile
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeOrgProfile(group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>> {
            return OrganizationUserProfilesApiFp(configuration).removeOrgProfile(group, org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This will change values of the Organization User Profile assocaited to the Account within a specified Organization. This will not update any information on the Account's Secured Profile.
         * @summary Update an Organization User Profile (name, contact info, bio, etc.) for an Account associated to this Organization
         * @param {Array<any>} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id the organization user profile ID OR the Account ID of the User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrgProfile(body: Array<any>, group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>> {
            return OrganizationUserProfilesApiFp(configuration).updateOrgProfile(body, group, org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * While Accounts themselves do not carry personal information, two concepts in UE Auth do: Secured Profiles and Organization User Profiles (as described here). Organizations may need to define information about their users such as first and last name, address, or other data over which they wish to have a measure of control. This data is limited in scope to the Organization itself and access is limited to Organization administrators or the Account holder. As such, Organization User Profiles are unique only to the Organization but reference a single unique Account in the AuthGroup. One Account could have as many Organization User Profiles as there are Organizations to which the Account has been given access. In contrast, Secured Profiles are entirely controlled by the Account holder (user) and not accessible by anyone other than that user. Secured Profile data can be requested but must always be actively approved and provided or denied by the User. In future iterations, it will be possible to request an Organization User Profile be seeded from a Secured Profile.
         * @summary Create an Organization User Profile (name, contact info, bio, etc.) for an Account associated to this Organization
         * @param {WriteOrgUserProfile} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeOrgProfile(body: WriteOrgUserProfile, group: string, org: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>> {
            return OrganizationUserProfilesApiFp(configuration).writeOrgProfile(body, group, org, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationUserProfilesApi - object-oriented interface
 * @export
 * @class OrganizationUserProfilesApi
 * @extends {BaseAPI}
 */
export class OrganizationUserProfilesApi extends BaseAPI {
    /**
     * This will return only the Profile information and not any Account information associated to the record except the Account ID or other information mirrored.
     * @summary Retrieve an Organization User Profile
     * @param {string} group the auth group ID associated to your business account
     * @param {string} org the organization ID
     * @param {string} id the organization user profile ID OR the Account ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUserProfilesApi
     */
    public async getOrgProfile(group: string, org: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2013>> {
        return OrganizationUserProfilesApiFp(this.configuration).getOrgProfile(group, org, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return and/or filter every Organization specific User Profile defined for this Organization.
     * @summary Query all of the Organization User Profiles in an Organization
     * @param {string} group the auth group ID associated to your business account
     * @param {string} org the organization ID
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {string} [skip] oData skip Query
     * @param {string} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUserProfilesApi
     */
    public async getOrgProfiles(group: string, org: string, filter?: string, select?: string, orderby?: string, skip?: string, top?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return OrganizationUserProfilesApiFp(this.configuration).getOrgProfiles(group, org, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This will delete the Organization User Profile but not change or update either the Account or Secured Profile (pending) in any way.
     * @summary Completel remove an Organization User Profile
     * @param {string} group the auth group ID associated to your business account
     * @param {string} org the organization ID
     * @param {string} id the organization user profile ID OR the Account ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUserProfilesApi
     */
    public async removeOrgProfile(group: string, org: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2013>> {
        return OrganizationUserProfilesApiFp(this.configuration).removeOrgProfile(group, org, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This will change values of the Organization User Profile assocaited to the Account within a specified Organization. This will not update any information on the Account's Secured Profile.
     * @summary Update an Organization User Profile (name, contact info, bio, etc.) for an Account associated to this Organization
     * @param {Array<any>} body Profile data to be written
     * @param {string} group the auth group ID associated to your business account
     * @param {string} org the organization ID
     * @param {string} id the organization user profile ID OR the Account ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUserProfilesApi
     */
    public async updateOrgProfile(body: Array<any>, group: string, org: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2013>> {
        return OrganizationUserProfilesApiFp(this.configuration).updateOrgProfile(body, group, org, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * While Accounts themselves do not carry personal information, two concepts in UE Auth do: Secured Profiles and Organization User Profiles (as described here). Organizations may need to define information about their users such as first and last name, address, or other data over which they wish to have a measure of control. This data is limited in scope to the Organization itself and access is limited to Organization administrators or the Account holder. As such, Organization User Profiles are unique only to the Organization but reference a single unique Account in the AuthGroup. One Account could have as many Organization User Profiles as there are Organizations to which the Account has been given access. In contrast, Secured Profiles are entirely controlled by the Account holder (user) and not accessible by anyone other than that user. Secured Profile data can be requested but must always be actively approved and provided or denied by the User. In future iterations, it will be possible to request an Organization User Profile be seeded from a Secured Profile.
     * @summary Create an Organization User Profile (name, contact info, bio, etc.) for an Account associated to this Organization
     * @param {WriteOrgUserProfile} body Profile data to be written
     * @param {string} group the auth group ID associated to your business account
     * @param {string} org the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUserProfilesApi
     */
    public async writeOrgProfile(body: WriteOrgUserProfile, group: string, org: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2013>> {
        return OrganizationUserProfilesApiFp(this.configuration).writeOrgProfile(body, group, org, options).then((request) => request(this.axios, this.basePath));
    }
}
