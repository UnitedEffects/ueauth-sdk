/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse20013 } from '../models';
/**
 * ValidateAccessApi - axios parameter creator
 * @export
 */
export const ValidateAccessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This AIP returns the caller's specific access data as defined by the caller's token. This endpoint is unique in the API in that it is not specific to the associated client and audience of the API itself. You can use this endpoint to validate access information for any user or client (client_credential). Please note that if the token is a Client Credential token, only the minmized=true version will be dispalyed and the other query parameters will have no effect.
         * @summary Query your token's access to organizations, domains, products, roles, and permissions
         * @param {string} group Auth Group Id or name
         * @param {string} [org] allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context. Access Token only
         * @param {string} [domain] if ID provided, it restricts the response to this domain. Access Token only
         * @param {string} [product] if ID provided, it restricts the response to this product. Access Token only
         * @param {boolean} [includeMiscRoles] these are roles attributed to the user that do not correlate to the domains or products provided access. Access Token only
         * @param {boolean} [excludePermissions] flag to let us know to return both roles and permissions, or just roles. Access Token only
         * @param {boolean} [minimized] if true, this creates arrays of ids in string form to reduce the size of the data. Access Token only, Client Credential responses are always minimized.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken: async (group: string, org?: string, domain?: string, product?: string, includeMiscRoles?: boolean, excludePermissions?: boolean, minimized?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling validateToken.');
            }
            const localVarPath = `/api/{group}/access/validate`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (includeMiscRoles !== undefined) {
                localVarQueryParameter['includeMiscRoles'] = includeMiscRoles;
            }

            if (excludePermissions !== undefined) {
                localVarQueryParameter['excludePermissions'] = excludePermissions;
            }

            if (minimized !== undefined) {
                localVarQueryParameter['minimized'] = minimized;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValidateAccessApi - functional programming interface
 * @export
 */
export const ValidateAccessApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This AIP returns the caller's specific access data as defined by the caller's token. This endpoint is unique in the API in that it is not specific to the associated client and audience of the API itself. You can use this endpoint to validate access information for any user or client (client_credential). Please note that if the token is a Client Credential token, only the minmized=true version will be dispalyed and the other query parameters will have no effect.
         * @summary Query your token's access to organizations, domains, products, roles, and permissions
         * @param {string} group Auth Group Id or name
         * @param {string} [org] allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context. Access Token only
         * @param {string} [domain] if ID provided, it restricts the response to this domain. Access Token only
         * @param {string} [product] if ID provided, it restricts the response to this product. Access Token only
         * @param {boolean} [includeMiscRoles] these are roles attributed to the user that do not correlate to the domains or products provided access. Access Token only
         * @param {boolean} [excludePermissions] flag to let us know to return both roles and permissions, or just roles. Access Token only
         * @param {boolean} [minimized] if true, this creates arrays of ids in string form to reduce the size of the data. Access Token only, Client Credential responses are always minimized.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateToken(group: string, org?: string, domain?: string, product?: string, includeMiscRoles?: boolean, excludePermissions?: boolean, minimized?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20013>>> {
            const localVarAxiosArgs = await ValidateAccessApiAxiosParamCreator(configuration).validateToken(group, org, domain, product, includeMiscRoles, excludePermissions, minimized, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ValidateAccessApi - factory interface
 * @export
 */
export const ValidateAccessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This AIP returns the caller's specific access data as defined by the caller's token. This endpoint is unique in the API in that it is not specific to the associated client and audience of the API itself. You can use this endpoint to validate access information for any user or client (client_credential). Please note that if the token is a Client Credential token, only the minmized=true version will be dispalyed and the other query parameters will have no effect.
         * @summary Query your token's access to organizations, domains, products, roles, and permissions
         * @param {string} group Auth Group Id or name
         * @param {string} [org] allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context. Access Token only
         * @param {string} [domain] if ID provided, it restricts the response to this domain. Access Token only
         * @param {string} [product] if ID provided, it restricts the response to this product. Access Token only
         * @param {boolean} [includeMiscRoles] these are roles attributed to the user that do not correlate to the domains or products provided access. Access Token only
         * @param {boolean} [excludePermissions] flag to let us know to return both roles and permissions, or just roles. Access Token only
         * @param {boolean} [minimized] if true, this creates arrays of ids in string form to reduce the size of the data. Access Token only, Client Credential responses are always minimized.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateToken(group: string, org?: string, domain?: string, product?: string, includeMiscRoles?: boolean, excludePermissions?: boolean, minimized?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20013>> {
            return ValidateAccessApiFp(configuration).validateToken(group, org, domain, product, includeMiscRoles, excludePermissions, minimized, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValidateAccessApi - object-oriented interface
 * @export
 * @class ValidateAccessApi
 * @extends {BaseAPI}
 */
export class ValidateAccessApi extends BaseAPI {
    /**
     * This AIP returns the caller's specific access data as defined by the caller's token. This endpoint is unique in the API in that it is not specific to the associated client and audience of the API itself. You can use this endpoint to validate access information for any user or client (client_credential). Please note that if the token is a Client Credential token, only the minmized=true version will be dispalyed and the other query parameters will have no effect.
     * @summary Query your token's access to organizations, domains, products, roles, and permissions
     * @param {string} group Auth Group Id or name
     * @param {string} [org] allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context. Access Token only
     * @param {string} [domain] if ID provided, it restricts the response to this domain. Access Token only
     * @param {string} [product] if ID provided, it restricts the response to this product. Access Token only
     * @param {boolean} [includeMiscRoles] these are roles attributed to the user that do not correlate to the domains or products provided access. Access Token only
     * @param {boolean} [excludePermissions] flag to let us know to return both roles and permissions, or just roles. Access Token only
     * @param {boolean} [minimized] if true, this creates arrays of ids in string form to reduce the size of the data. Access Token only, Client Credential responses are always minimized.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidateAccessApi
     */
    public async validateToken(group: string, org?: string, domain?: string, product?: string, includeMiscRoles?: boolean, excludePermissions?: boolean, minimized?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20013>> {
        return ValidateAccessApiFp(this.configuration).validateToken(group, org, domain, product, includeMiscRoles, excludePermissions, minimized, options).then((request) => request(this.axios, this.basePath));
    }
}
