/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse20026 } from '../models';
import { InlineResponse20027 } from '../models';
import { InlineResponse2015 } from '../models';
import { RoleWrite } from '../models';
/**
 * OrganizationRolesApi - axios parameter creator
 * @export
 */
export const OrganizationRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Scoped to this specific organization for a given Product, this API allows you to create custom Roles that only those in the Organization will be able to see. Be careful not to use this API when you intend to create a Global Role. If the specified product is not associated to the Organization, this returns a 404. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Define new roles specific to this Organization.
         * @param {RoleWrite} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleByOrg: async (body: RoleWrite, group: string, org: string, product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRoleByOrg.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling createRoleByOrg.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling createRoleByOrg.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling createRoleByOrg.');
            }
            const localVarPath = `/api/{group}/organizations/{org}/products/{product}/roles`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scoped to this specific organization - delete a Role specific to this Organization. If the Product specified is not associated to the Organization, you will get a 404.
         * @summary Remove a custom Role specific to this Organization and Product
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductRoleByOrg: async (group: string, org: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling deleteProductRoleByOrg.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling deleteProductRoleByOrg.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling deleteProductRoleByOrg.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProductRoleByOrg.');
            }
            const localVarPath = `/api/{group}/organizations/{org}/products/{product}/roles/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scoped to this specific Organization - returns available global Roles along with Organization specific Roles across all associated Organization Products
         * @summary Get all roles across Products in your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRolesAcrossProductsByOrg: async (group: string, org: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getAllRolesAcrossProductsByOrg.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getAllRolesAcrossProductsByOrg.');
            }
            const localVarPath = `/api/{group}/organization/{org}/roles`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scoped to this specific Organization - returns a Role, either globally available or specific to this Organization. If the product specified is not assocaited to the Organization, a 404 is returned.
         * @summary Get Role information for a Product in your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductRoleByOrg: async (group: string, org: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getProductRoleByOrg.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getProductRoleByOrg.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getProductRoleByOrg.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductRoleByOrg.');
            }
            const localVarPath = `/api/{group}/organizations/{org}/products/{product}/roles/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scoped to this specific Organization - returns global Roles and thos Roles specific to the provided organization for a given product. If the product requested is not associated to the Organization it will return a 404.
         * @summary Get Roles in a single Product
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductRolesByOrg: async (group: string, org: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getProductRolesByOrg.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getProductRolesByOrg.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getProductRolesByOrg.');
            }
            const localVarPath = `/api/{group}/organizations/{org}/products/{product}/roles`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scoped to this specific Organization - updates a role specific to this Organization. This API is specific to custom roles (custom=true) created by the Organization. If you are an AuthGroup Admin and you wish to update a globally available Role, use the other PATCH Role endpoint. If the specified product is not associated to the Organization, you will recieve a 404. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Update a Role specific to the Organization
         * @param {Array<any>} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique product identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleByOrg: async (body: Array<any>, group: string, org: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRoleByOrg.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling updateRoleByOrg.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling updateRoleByOrg.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling updateRoleByOrg.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateRoleByOrg.');
            }
            const localVarPath = `/api/{group}/organizations/{org}/products/{product}/roles/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationRolesApi - functional programming interface
 * @export
 */
export const OrganizationRolesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Scoped to this specific organization for a given Product, this API allows you to create custom Roles that only those in the Organization will be able to see. Be careful not to use this API when you intend to create a Global Role. If the specified product is not associated to the Organization, this returns a 404. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Define new roles specific to this Organization.
         * @param {RoleWrite} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoleByOrg(body: RoleWrite, group: string, org: string, product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await OrganizationRolesApiAxiosParamCreator(configuration).createRoleByOrg(body, group, org, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scoped to this specific organization - delete a Role specific to this Organization. If the Product specified is not associated to the Organization, you will get a 404.
         * @summary Remove a custom Role specific to this Organization and Product
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductRoleByOrg(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20027>>> {
            const localVarAxiosArgs = await OrganizationRolesApiAxiosParamCreator(configuration).deleteProductRoleByOrg(group, org, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scoped to this specific Organization - returns available global Roles along with Organization specific Roles across all associated Organization Products
         * @summary Get all roles across Products in your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRolesAcrossProductsByOrg(group: string, org: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20026>>> {
            const localVarAxiosArgs = await OrganizationRolesApiAxiosParamCreator(configuration).getAllRolesAcrossProductsByOrg(group, org, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scoped to this specific Organization - returns a Role, either globally available or specific to this Organization. If the product specified is not assocaited to the Organization, a 404 is returned.
         * @summary Get Role information for a Product in your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductRoleByOrg(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20027>>> {
            const localVarAxiosArgs = await OrganizationRolesApiAxiosParamCreator(configuration).getProductRoleByOrg(group, org, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scoped to this specific Organization - returns global Roles and thos Roles specific to the provided organization for a given product. If the product requested is not associated to the Organization it will return a 404.
         * @summary Get Roles in a single Product
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductRolesByOrg(group: string, org: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20026>>> {
            const localVarAxiosArgs = await OrganizationRolesApiAxiosParamCreator(configuration).getProductRolesByOrg(group, org, product, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scoped to this specific Organization - updates a role specific to this Organization. This API is specific to custom roles (custom=true) created by the Organization. If you are an AuthGroup Admin and you wish to update a globally available Role, use the other PATCH Role endpoint. If the specified product is not associated to the Organization, you will recieve a 404. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Update a Role specific to the Organization
         * @param {Array<any>} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique product identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoleByOrg(body: Array<any>, group: string, org: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await OrganizationRolesApiAxiosParamCreator(configuration).updateRoleByOrg(body, group, org, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationRolesApi - factory interface
 * @export
 */
export const OrganizationRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Scoped to this specific organization for a given Product, this API allows you to create custom Roles that only those in the Organization will be able to see. Be careful not to use this API when you intend to create a Global Role. If the specified product is not associated to the Organization, this returns a 404. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Define new roles specific to this Organization.
         * @param {RoleWrite} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoleByOrg(body: RoleWrite, group: string, org: string, product: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return OrganizationRolesApiFp(configuration).createRoleByOrg(body, group, org, product, options).then((request) => request(axios, basePath));
        },
        /**
         * Scoped to this specific organization - delete a Role specific to this Organization. If the Product specified is not associated to the Organization, you will get a 404.
         * @summary Remove a custom Role specific to this Organization and Product
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductRoleByOrg(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20027>> {
            return OrganizationRolesApiFp(configuration).deleteProductRoleByOrg(group, org, product, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Scoped to this specific Organization - returns available global Roles along with Organization specific Roles across all associated Organization Products
         * @summary Get all roles across Products in your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRolesAcrossProductsByOrg(group: string, org: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20026>> {
            return OrganizationRolesApiFp(configuration).getAllRolesAcrossProductsByOrg(group, org, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * Scoped to this specific Organization - returns a Role, either globally available or specific to this Organization. If the product specified is not assocaited to the Organization, a 404 is returned.
         * @summary Get Role information for a Product in your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductRoleByOrg(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20027>> {
            return OrganizationRolesApiFp(configuration).getProductRoleByOrg(group, org, product, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Scoped to this specific Organization - returns global Roles and thos Roles specific to the provided organization for a given product. If the product requested is not associated to the Organization it will return a 404.
         * @summary Get Roles in a single Product
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique user identifier
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductRolesByOrg(group: string, org: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20026>> {
            return OrganizationRolesApiFp(configuration).getProductRolesByOrg(group, org, product, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * Scoped to this specific Organization - updates a role specific to this Organization. This API is specific to custom roles (custom=true) created by the Organization. If you are an AuthGroup Admin and you wish to update a globally available Role, use the other PATCH Role endpoint. If the specified product is not associated to the Organization, you will recieve a 404. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Update a Role specific to the Organization
         * @param {Array<any>} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} org organization Id
         * @param {string} product Unique product identifier
         * @param {string} id Unique role identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoleByOrg(body: Array<any>, group: string, org: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return OrganizationRolesApiFp(configuration).updateRoleByOrg(body, group, org, product, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationRolesApi - object-oriented interface
 * @export
 * @class OrganizationRolesApi
 * @extends {BaseAPI}
 */
export class OrganizationRolesApi extends BaseAPI {
    /**
     * Scoped to this specific organization for a given Product, this API allows you to create custom Roles that only those in the Organization will be able to see. Be careful not to use this API when you intend to create a Global Role. If the specified product is not associated to the Organization, this returns a 404. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
     * @summary Define new roles specific to this Organization.
     * @param {RoleWrite} body Create a new role
     * @param {string} group Auth Group Id or name
     * @param {string} org organization Id
     * @param {string} product Unique product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRolesApi
     */
    public async createRoleByOrg(body: RoleWrite, group: string, org: string, product: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return OrganizationRolesApiFp(this.configuration).createRoleByOrg(body, group, org, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scoped to this specific organization - delete a Role specific to this Organization. If the Product specified is not associated to the Organization, you will get a 404.
     * @summary Remove a custom Role specific to this Organization and Product
     * @param {string} group Auth Group Id or name
     * @param {string} org organization Id
     * @param {string} product Unique user identifier
     * @param {string} id Unique role identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRolesApi
     */
    public async deleteProductRoleByOrg(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20027>> {
        return OrganizationRolesApiFp(this.configuration).deleteProductRoleByOrg(group, org, product, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scoped to this specific Organization - returns available global Roles along with Organization specific Roles across all associated Organization Products
     * @summary Get all roles across Products in your Organization
     * @param {string} group Auth Group Id or name
     * @param {string} org organization Id
     * @param {string} [search] keyword search across roles - not part of oData
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRolesApi
     */
    public async getAllRolesAcrossProductsByOrg(group: string, org: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20026>> {
        return OrganizationRolesApiFp(this.configuration).getAllRolesAcrossProductsByOrg(group, org, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scoped to this specific Organization - returns a Role, either globally available or specific to this Organization. If the product specified is not assocaited to the Organization, a 404 is returned.
     * @summary Get Role information for a Product in your Organization
     * @param {string} group Auth Group Id or name
     * @param {string} org organization Id
     * @param {string} product Unique user identifier
     * @param {string} id Unique role identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRolesApi
     */
    public async getProductRoleByOrg(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20027>> {
        return OrganizationRolesApiFp(this.configuration).getProductRoleByOrg(group, org, product, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scoped to this specific Organization - returns global Roles and thos Roles specific to the provided organization for a given product. If the product requested is not associated to the Organization it will return a 404.
     * @summary Get Roles in a single Product
     * @param {string} group Auth Group Id or name
     * @param {string} org organization Id
     * @param {string} product Unique user identifier
     * @param {string} [search] keyword search across roles - not part of oData
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRolesApi
     */
    public async getProductRolesByOrg(group: string, org: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20026>> {
        return OrganizationRolesApiFp(this.configuration).getProductRolesByOrg(group, org, product, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scoped to this specific Organization - updates a role specific to this Organization. This API is specific to custom roles (custom=true) created by the Organization. If you are an AuthGroup Admin and you wish to update a globally available Role, use the other PATCH Role endpoint. If the specified product is not associated to the Organization, you will recieve a 404. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
     * @summary Update a Role specific to the Organization
     * @param {Array<any>} body Create a new role
     * @param {string} group Auth Group Id or name
     * @param {string} org organization Id
     * @param {string} product Unique product identifier
     * @param {string} id Unique role identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRolesApi
     */
    public async updateRoleByOrg(body: Array<any>, group: string, org: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return OrganizationRolesApiFp(this.configuration).updateRoleByOrg(body, group, org, product, id, options).then((request) => request(this.axios, this.basePath));
    }
}
