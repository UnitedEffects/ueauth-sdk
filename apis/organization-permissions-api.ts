/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse20031 } from '../models';
import { InlineResponse20032 } from '../models';
import { InlineResponse20033 } from '../models';
/**
 * OrganizationPermissionsApi - axios parameter creator
 * @export
 */
export const OrganizationPermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Query a single Permission for its description, code and other meta data
         * @summary Get a permission by Id if the associated product is associated to your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgPermission: async (group: string, org: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgPermission.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgPermission.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getOrgPermission.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOrgPermission.');
            }
            const localVarPath = `/api/{group}/organization/{org}/products/{product}/permissions/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all of the Permissions assocaited to this Product
         * @summary Get all Permissions for a Product which is associated to your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {string} product Product Id
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgPermissions: async (group: string, org: string, product: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgPermissions.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgPermissions.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getOrgPermissions.');
            }
            const localVarPath = `/api/{group}/organization/{org}/products/{product}/permissions`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query and search the permissions tied to a specific role within a product and organization context.
         * @summary Query and search the permissions tied to a specific role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique product identifier
         * @param {string} org Unique organization identifier
         * @param {string} role Unique id of the role
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgRolePermissions: async (group: string, product: string, org: string, role: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgRolePermissions.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getOrgRolePermissions.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgRolePermissions.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling getOrgRolePermissions.');
            }
            const localVarPath = `/api/{group}/organization/{org}/products/{product}/roles/{role}/permissions`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationPermissionsApi - functional programming interface
 * @export
 */
export const OrganizationPermissionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Query a single Permission for its description, code and other meta data
         * @summary Get a permission by Id if the associated product is associated to your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgPermission(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20032>>> {
            const localVarAxiosArgs = await OrganizationPermissionsApiAxiosParamCreator(configuration).getOrgPermission(group, org, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all of the Permissions assocaited to this Product
         * @summary Get all Permissions for a Product which is associated to your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {string} product Product Id
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgPermissions(group: string, org: string, product: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20031>>> {
            const localVarAxiosArgs = await OrganizationPermissionsApiAxiosParamCreator(configuration).getOrgPermissions(group, org, product, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query and search the permissions tied to a specific role within a product and organization context.
         * @summary Query and search the permissions tied to a specific role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique product identifier
         * @param {string} org Unique organization identifier
         * @param {string} role Unique id of the role
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgRolePermissions(group: string, product: string, org: string, role: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20033>>> {
            const localVarAxiosArgs = await OrganizationPermissionsApiAxiosParamCreator(configuration).getOrgRolePermissions(group, product, org, role, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationPermissionsApi - factory interface
 * @export
 */
export const OrganizationPermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Query a single Permission for its description, code and other meta data
         * @summary Get a permission by Id if the associated product is associated to your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgPermission(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20032>> {
            return OrganizationPermissionsApiFp(configuration).getOrgPermission(group, org, product, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all of the Permissions assocaited to this Product
         * @summary Get all Permissions for a Product which is associated to your Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {string} product Product Id
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgPermissions(group: string, org: string, product: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20031>> {
            return OrganizationPermissionsApiFp(configuration).getOrgPermissions(group, org, product, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * Query and search the permissions tied to a specific role within a product and organization context.
         * @summary Query and search the permissions tied to a specific role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique product identifier
         * @param {string} org Unique organization identifier
         * @param {string} role Unique id of the role
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgRolePermissions(group: string, product: string, org: string, role: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20033>> {
            return OrganizationPermissionsApiFp(configuration).getOrgRolePermissions(group, product, org, role, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationPermissionsApi - object-oriented interface
 * @export
 * @class OrganizationPermissionsApi
 * @extends {BaseAPI}
 */
export class OrganizationPermissionsApi extends BaseAPI {
    /**
     * Query a single Permission for its description, code and other meta data
     * @summary Get a permission by Id if the associated product is associated to your Organization
     * @param {string} group Auth Group Id or name
     * @param {string} org Organization context
     * @param {string} product Product Id
     * @param {string} id permission id guid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPermissionsApi
     */
    public async getOrgPermission(group: string, org: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20032>> {
        return OrganizationPermissionsApiFp(this.configuration).getOrgPermission(group, org, product, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all of the Permissions assocaited to this Product
     * @summary Get all Permissions for a Product which is associated to your Organization
     * @param {string} group Auth Group Id or name
     * @param {string} org Organization context
     * @param {string} product Product Id
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPermissionsApi
     */
    public async getOrgPermissions(group: string, org: string, product: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20031>> {
        return OrganizationPermissionsApiFp(this.configuration).getOrgPermissions(group, org, product, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query and search the permissions tied to a specific role within a product and organization context.
     * @summary Query and search the permissions tied to a specific role
     * @param {string} group Auth Group Id or name
     * @param {string} product Unique product identifier
     * @param {string} org Unique organization identifier
     * @param {string} role Unique id of the role
     * @param {string} [search] keyword search across roles - not part of oData
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPermissionsApi
     */
    public async getOrgRolePermissions(group: string, product: string, org: string, role: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20033>> {
        return OrganizationPermissionsApiFp(this.configuration).getOrgRolePermissions(group, product, org, role, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
}
