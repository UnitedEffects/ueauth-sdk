/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse20031 } from '../models';
import { InlineResponse20032 } from '../models';
import { InlineResponse20033 } from '../models';
import { InlineResponse20034 } from '../models';
import { InlineResponse20035 } from '../models';
import { InlineResponse20036 } from '../models';
import { WritePermission } from '../models';
/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Bulk delete permissions will remove all permissions identified by the array of UUIDs provided in the body as long as those permissions are not core=true (i.e. created by UE Auth itself). WARNING - this will not clear roles and can create orphan role references. This will be addressed in a future release but for now you must ensure this endpoint is not used on Ids with role references.
         * @summary Bulk Delete Permissions
         * @param {Array<string>} body Remove all permissions by id in the array
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeletePermissions: async (body: Array<string>, group: string, product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling bulkDeletePermissions.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling bulkDeletePermissions.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling bulkDeletePermissions.');
            }
            const localVarPath = `/api/{group}/products/{product}/permissions`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Find out how many roles reference this permission. Useful to run before a delete operation.
         * @summary Find out how many roles reference this permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRolesForPermission: async (group: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling checkRolesForPermission.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling checkRolesForPermission.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkRolesForPermission.');
            }
            const localVarPath = `/api/{group}/products/{product}/permissions/{id}/reference-check/role`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Permissions have a many to one relationship to Products, meaning all Permissions must specify exactly one Product. Once created, a Permission can't be updated... you must delete it and create a new one. This API creates multiple permissions for a single product. For a detailed explanation of Permissions in UE Auth, you may review this <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>Wiki Document</a>.
         * @summary Create many permissions.
         * @param {Array<WritePermission>} body Create new pemrissions
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyPermission: async (body: Array<WritePermission>, group: string, product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createManyPermission.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling createManyPermission.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling createManyPermission.');
            }
            const localVarPath = `/api/{group}/products/{product}/permissions`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Permissions have a many to one relationship to Products, meaning all Permissions must specify exactly one Product. Once created, a Permission can't be updated... you must delete it and create a new one. You will see references to a Permission's code in this and other UE Auth docs. This is refering to the shorthand and unique (within the AuthGroup and Product) encoding that UE Auth automatically creates for each permission object in the format of target::action:ownership. For a detailed explanation of Permissions in UE Auth, you may review this <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>Wiki Document</a>.
         * @summary Create a permission.
         * @param {WritePermission} body Create a new permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermission: async (body: WritePermission, group: string, product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPermission.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling createPermission.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling createPermission.');
            }
            const localVarPath = `/api/{group}/products/{product}/permission`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Permission will automatically clear all references from roles. Use /permissions/check/role to see which
         * @summary Delete a Permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermission: async (group: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling deletePermission.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling deletePermission.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePermission.');
            }
            const localVarPath = `/api/{group}/products/{product}/permissions/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query a single Permission for its description, code and other meta data
         * @summary Get a permission by Id
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission: async (group: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getPermission.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getPermission.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPermission.');
            }
            const localVarPath = `/api/{group}/products/{product}/permissions/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all of the available Permission actions for a product. Note, there is no separate Actions table or collection. This API aggregates all Actions used across an AuthGroup and Product and returns them as a reference. To add new Actions, simply specify a previously unused Action when creating a Permission.
         * @summary Get all of the available Permission Actions for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionActions: async (group: string, product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getPermissionActions.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getPermissionActions.');
            }
            const localVarPath = `/api/{group}/products/{product}/permission/actions`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all of the available Permission Tags for a product. Note, there is no separate Tags table or collection. This API aggregates all Tags used across an AuthGroup and Product and returns them as a reference. To add new Tags, simply specify a previously unused Tag when creating a Permission.
         * @summary Get all of the available Permission Tags for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTags: async (group: string, product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getPermissionTags.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getPermissionTags.');
            }
            const localVarPath = `/api/{group}/products/{product}/permission/tags`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all of the available Permission targets for a product. Note, there is no separate Targets table or collection. This API aggregates all Targets used across an AuthGroup and Product and returns them as a reference. To add new Targets, simply specify a previously unused Target when creating a Permission.
         * @summary Get all of the available Permission Targets for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTargets: async (group: string, product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getPermissionTargets.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getPermissionTargets.');
            }
            const localVarPath = `/api/{group}/products/{product}/permission/targets`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all of the Permissions assocaited to this Product
         * @summary Get all Permissions for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} [search] this performs a standard keyword search - not part of odata
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissions: async (group: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getPermissions.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getPermissions.');
            }
            const localVarPath = `/api/{group}/products/{product}/permissions`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query and search the permissions tied to a specific role within a product context.
         * @summary Query and search the permissions tied to a specific role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique user identifier
         * @param {string} role Unique id of the role
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolePermissions: async (group: string, product: string, role: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getRolePermissions.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getRolePermissions.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling getRolePermissions.');
            }
            const localVarPath = `/api/{group}/products/{product}/roles/{role}/permissions`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Bulk delete permissions will remove all permissions identified by the array of UUIDs provided in the body as long as those permissions are not core=true (i.e. created by UE Auth itself). WARNING - this will not clear roles and can create orphan role references. This will be addressed in a future release but for now you must ensure this endpoint is not used on Ids with role references.
         * @summary Bulk Delete Permissions
         * @param {Array<string>} body Remove all permissions by id in the array
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeletePermissions(body: Array<string>, group: string, product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20032>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).bulkDeletePermissions(body, group, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Find out how many roles reference this permission. Useful to run before a delete operation.
         * @summary Find out how many roles reference this permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkRolesForPermission(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).checkRolesForPermission(group, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Permissions have a many to one relationship to Products, meaning all Permissions must specify exactly one Product. Once created, a Permission can't be updated... you must delete it and create a new one. This API creates multiple permissions for a single product. For a detailed explanation of Permissions in UE Auth, you may review this <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>Wiki Document</a>.
         * @summary Create many permissions.
         * @param {Array<WritePermission>} body Create new pemrissions
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManyPermission(body: Array<WritePermission>, group: string, product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20031>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).createManyPermission(body, group, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Permissions have a many to one relationship to Products, meaning all Permissions must specify exactly one Product. Once created, a Permission can't be updated... you must delete it and create a new one. You will see references to a Permission's code in this and other UE Auth docs. This is refering to the shorthand and unique (within the AuthGroup and Product) encoding that UE Auth automatically creates for each permission object in the format of target::action:ownership. For a detailed explanation of Permissions in UE Auth, you may review this <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>Wiki Document</a>.
         * @summary Create a permission.
         * @param {WritePermission} body Create a new permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPermission(body: WritePermission, group: string, product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20032>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).createPermission(body, group, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete Permission will automatically clear all references from roles. Use /permissions/check/role to see which
         * @summary Delete a Permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePermission(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20032>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).deletePermission(group, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query a single Permission for its description, code and other meta data
         * @summary Get a permission by Id
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermission(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20032>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).getPermission(group, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all of the available Permission actions for a product. Note, there is no separate Actions table or collection. This API aggregates all Actions used across an AuthGroup and Product and returns them as a reference. To add new Actions, simply specify a previously unused Action when creating a Permission.
         * @summary Get all of the available Permission Actions for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionActions(group: string, product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20035>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).getPermissionActions(group, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all of the available Permission Tags for a product. Note, there is no separate Tags table or collection. This API aggregates all Tags used across an AuthGroup and Product and returns them as a reference. To add new Tags, simply specify a previously unused Tag when creating a Permission.
         * @summary Get all of the available Permission Tags for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionTags(group: string, product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20036>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).getPermissionTags(group, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all of the available Permission targets for a product. Note, there is no separate Targets table or collection. This API aggregates all Targets used across an AuthGroup and Product and returns them as a reference. To add new Targets, simply specify a previously unused Target when creating a Permission.
         * @summary Get all of the available Permission Targets for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionTargets(group: string, product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20036>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).getPermissionTargets(group, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all of the Permissions assocaited to this Product
         * @summary Get all Permissions for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} [search] this performs a standard keyword search - not part of odata
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissions(group: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20031>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).getPermissions(group, product, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query and search the permissions tied to a specific role within a product context.
         * @summary Query and search the permissions tied to a specific role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique user identifier
         * @param {string} role Unique id of the role
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolePermissions(group: string, product: string, role: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20033>>> {
            const localVarAxiosArgs = await PermissionsApiAxiosParamCreator(configuration).getRolePermissions(group, product, role, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Bulk delete permissions will remove all permissions identified by the array of UUIDs provided in the body as long as those permissions are not core=true (i.e. created by UE Auth itself). WARNING - this will not clear roles and can create orphan role references. This will be addressed in a future release but for now you must ensure this endpoint is not used on Ids with role references.
         * @summary Bulk Delete Permissions
         * @param {Array<string>} body Remove all permissions by id in the array
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeletePermissions(body: Array<string>, group: string, product: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20032>> {
            return PermissionsApiFp(configuration).bulkDeletePermissions(body, group, product, options).then((request) => request(axios, basePath));
        },
        /**
         * Find out how many roles reference this permission. Useful to run before a delete operation.
         * @summary Find out how many roles reference this permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkRolesForPermission(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return PermissionsApiFp(configuration).checkRolesForPermission(group, product, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Permissions have a many to one relationship to Products, meaning all Permissions must specify exactly one Product. Once created, a Permission can't be updated... you must delete it and create a new one. This API creates multiple permissions for a single product. For a detailed explanation of Permissions in UE Auth, you may review this <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>Wiki Document</a>.
         * @summary Create many permissions.
         * @param {Array<WritePermission>} body Create new pemrissions
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManyPermission(body: Array<WritePermission>, group: string, product: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20031>> {
            return PermissionsApiFp(configuration).createManyPermission(body, group, product, options).then((request) => request(axios, basePath));
        },
        /**
         * Permissions have a many to one relationship to Products, meaning all Permissions must specify exactly one Product. Once created, a Permission can't be updated... you must delete it and create a new one. You will see references to a Permission's code in this and other UE Auth docs. This is refering to the shorthand and unique (within the AuthGroup and Product) encoding that UE Auth automatically creates for each permission object in the format of target::action:ownership. For a detailed explanation of Permissions in UE Auth, you may review this <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>Wiki Document</a>.
         * @summary Create a permission.
         * @param {WritePermission} body Create a new permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPermission(body: WritePermission, group: string, product: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20032>> {
            return PermissionsApiFp(configuration).createPermission(body, group, product, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Permission will automatically clear all references from roles. Use /permissions/check/role to see which
         * @summary Delete a Permission
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePermission(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20032>> {
            return PermissionsApiFp(configuration).deletePermission(group, product, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Query a single Permission for its description, code and other meta data
         * @summary Get a permission by Id
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} id permission id guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermission(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20032>> {
            return PermissionsApiFp(configuration).getPermission(group, product, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all of the available Permission actions for a product. Note, there is no separate Actions table or collection. This API aggregates all Actions used across an AuthGroup and Product and returns them as a reference. To add new Actions, simply specify a previously unused Action when creating a Permission.
         * @summary Get all of the available Permission Actions for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionActions(group: string, product: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20035>> {
            return PermissionsApiFp(configuration).getPermissionActions(group, product, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all of the available Permission Tags for a product. Note, there is no separate Tags table or collection. This API aggregates all Tags used across an AuthGroup and Product and returns them as a reference. To add new Tags, simply specify a previously unused Tag when creating a Permission.
         * @summary Get all of the available Permission Tags for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionTags(group: string, product: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20036>> {
            return PermissionsApiFp(configuration).getPermissionTags(group, product, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all of the available Permission targets for a product. Note, there is no separate Targets table or collection. This API aggregates all Targets used across an AuthGroup and Product and returns them as a reference. To add new Targets, simply specify a previously unused Target when creating a Permission.
         * @summary Get all of the available Permission Targets for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionTargets(group: string, product: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20036>> {
            return PermissionsApiFp(configuration).getPermissionTargets(group, product, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all of the Permissions assocaited to this Product
         * @summary Get all Permissions for a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Product Id
         * @param {string} [search] this performs a standard keyword search - not part of odata
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissions(group: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20031>> {
            return PermissionsApiFp(configuration).getPermissions(group, product, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * Query and search the permissions tied to a specific role within a product context.
         * @summary Query and search the permissions tied to a specific role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique user identifier
         * @param {string} role Unique id of the role
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolePermissions(group: string, product: string, role: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20033>> {
            return PermissionsApiFp(configuration).getRolePermissions(group, product, role, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     * Bulk delete permissions will remove all permissions identified by the array of UUIDs provided in the body as long as those permissions are not core=true (i.e. created by UE Auth itself). WARNING - this will not clear roles and can create orphan role references. This will be addressed in a future release but for now you must ensure this endpoint is not used on Ids with role references.
     * @summary Bulk Delete Permissions
     * @param {Array<string>} body Remove all permissions by id in the array
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async bulkDeletePermissions(body: Array<string>, group: string, product: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20032>> {
        return PermissionsApiFp(this.configuration).bulkDeletePermissions(body, group, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Find out how many roles reference this permission. Useful to run before a delete operation.
     * @summary Find out how many roles reference this permission
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {string} id permission id guid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async checkRolesForPermission(group: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return PermissionsApiFp(this.configuration).checkRolesForPermission(group, product, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permissions have a many to one relationship to Products, meaning all Permissions must specify exactly one Product. Once created, a Permission can't be updated... you must delete it and create a new one. This API creates multiple permissions for a single product. For a detailed explanation of Permissions in UE Auth, you may review this <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>Wiki Document</a>.
     * @summary Create many permissions.
     * @param {Array<WritePermission>} body Create new pemrissions
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async createManyPermission(body: Array<WritePermission>, group: string, product: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20031>> {
        return PermissionsApiFp(this.configuration).createManyPermission(body, group, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permissions have a many to one relationship to Products, meaning all Permissions must specify exactly one Product. Once created, a Permission can't be updated... you must delete it and create a new one. You will see references to a Permission's code in this and other UE Auth docs. This is refering to the shorthand and unique (within the AuthGroup and Product) encoding that UE Auth automatically creates for each permission object in the format of target::action:ownership. For a detailed explanation of Permissions in UE Auth, you may review this <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>Wiki Document</a>.
     * @summary Create a permission.
     * @param {WritePermission} body Create a new permission
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async createPermission(body: WritePermission, group: string, product: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20032>> {
        return PermissionsApiFp(this.configuration).createPermission(body, group, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Permission will automatically clear all references from roles. Use /permissions/check/role to see which
     * @summary Delete a Permission
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {string} id permission id guid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async deletePermission(group: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20032>> {
        return PermissionsApiFp(this.configuration).deletePermission(group, product, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query a single Permission for its description, code and other meta data
     * @summary Get a permission by Id
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {string} id permission id guid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async getPermission(group: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20032>> {
        return PermissionsApiFp(this.configuration).getPermission(group, product, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all of the available Permission actions for a product. Note, there is no separate Actions table or collection. This API aggregates all Actions used across an AuthGroup and Product and returns them as a reference. To add new Actions, simply specify a previously unused Action when creating a Permission.
     * @summary Get all of the available Permission Actions for a Product
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async getPermissionActions(group: string, product: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20035>> {
        return PermissionsApiFp(this.configuration).getPermissionActions(group, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all of the available Permission Tags for a product. Note, there is no separate Tags table or collection. This API aggregates all Tags used across an AuthGroup and Product and returns them as a reference. To add new Tags, simply specify a previously unused Tag when creating a Permission.
     * @summary Get all of the available Permission Tags for a Product
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async getPermissionTags(group: string, product: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20036>> {
        return PermissionsApiFp(this.configuration).getPermissionTags(group, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all of the available Permission targets for a product. Note, there is no separate Targets table or collection. This API aggregates all Targets used across an AuthGroup and Product and returns them as a reference. To add new Targets, simply specify a previously unused Target when creating a Permission.
     * @summary Get all of the available Permission Targets for a Product
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async getPermissionTargets(group: string, product: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20036>> {
        return PermissionsApiFp(this.configuration).getPermissionTargets(group, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all of the Permissions assocaited to this Product
     * @summary Get all Permissions for a Product
     * @param {string} group Auth Group Id or name
     * @param {string} product Product Id
     * @param {string} [search] this performs a standard keyword search - not part of odata
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async getPermissions(group: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20031>> {
        return PermissionsApiFp(this.configuration).getPermissions(group, product, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query and search the permissions tied to a specific role within a product context.
     * @summary Query and search the permissions tied to a specific role
     * @param {string} group Auth Group Id or name
     * @param {string} product Unique user identifier
     * @param {string} role Unique id of the role
     * @param {string} [search] keyword search across roles - not part of oData
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public async getRolePermissions(group: string, product: string, role: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20033>> {
        return PermissionsApiFp(this.configuration).getRolePermissions(group, product, role, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
}
