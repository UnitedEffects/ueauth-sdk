/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CallbackRequest } from '../models';
import { DefaultError } from '../models';
import { DeviceChallengeBody } from '../models';
import { InlineResponse200 } from '../models';
import { MfaInstructions } from '../models';
import { MfaRequestBind } from '../models';
import { MfaSafeRecovery } from '../models';
import { SendMfaSafeRecovery } from '../models';
/**
 * DeviceChallengeApi - axios parameter creator
 * @export
 */
export const DeviceChallengeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * For an account with a saved state session, initiate a device based challenge.
         * @summary For an account with a saved state session, initiate a device based challenge.
         * @param {DeviceChallengeBody} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceSendChallenge: async (body: DeviceChallengeBody, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deviceSendChallenge.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling deviceSendChallenge.');
            }
            const localVarPath = `/api/{group}/device/challenge`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * When configuring an MFA provider, you will likely need to provide a callback uri.
         * @summary Callback used by provider to communicate user approval or denial of challenge
         * @param {CallbackRequest} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaCallback: async (body: CallbackRequest, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mfaCallback.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling mfaCallback.');
            }
            const localVarPath = `/api/{group}/mfa/callback`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is multi-purpose, responding to a request based on which properties have been provided. See request object for details.
         * @summary Request an account be bound and instructions for device setup be provided
         * @param {MfaRequestBind} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaInstructions: async (body: MfaRequestBind, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mfaInstructions.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling mfaInstructions.');
            }
            const localVarPath = `/api/{group}/mfa/instructions`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows a user to validate who they are through email or a challenge. This is used as part of MFA recovery when the user wants to bind to a new device. Security on this is an initial access token as provided by the instructions endpoint.
         * @summary Request to verify your identity via email or an existing MFA device
         * @param {SendMfaSafeRecovery} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaSafeRecovery: async (body: SendMfaSafeRecovery, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mfaSafeRecovery.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling mfaSafeRecovery.');
            }
            const localVarPath = `/api/{group}/mfa/safe-recovery`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * You can poll UE Auth for the response to a challenge sent to a user.
         * @summary Poll UE Auth for a response to a challenge.
         * @param {string} group the auth group ID associated to your business account
         * @param {string} key the providerKey (id) returned by the challenge request
         * @param {string} account the account Id being challenged
         * @param {string} uid the interaction Id or state used to ensure secure interaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaStatus: async (group: string, key: string, account: string, uid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling mfaStatus.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling mfaStatus.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling mfaStatus.');
            }
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling mfaStatus.');
            }
            const localVarPath = `/api/{group}/mfa/{key}/account/{account}/interaction/{uid}/status`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceChallengeApi - functional programming interface
 * @export
 */
export const DeviceChallengeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * For an account with a saved state session, initiate a device based challenge.
         * @summary For an account with a saved state session, initiate a device based challenge.
         * @param {DeviceChallengeBody} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceSendChallenge(body: DeviceChallengeBody, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await DeviceChallengeApiAxiosParamCreator(configuration).deviceSendChallenge(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * When configuring an MFA provider, you will likely need to provide a callback uri.
         * @summary Callback used by provider to communicate user approval or denial of challenge
         * @param {CallbackRequest} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaCallback(body: CallbackRequest, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DeviceChallengeApiAxiosParamCreator(configuration).mfaCallback(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This API is multi-purpose, responding to a request based on which properties have been provided. See request object for details.
         * @summary Request an account be bound and instructions for device setup be provided
         * @param {MfaRequestBind} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaInstructions(body: MfaRequestBind, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MfaInstructions>>> {
            const localVarAxiosArgs = await DeviceChallengeApiAxiosParamCreator(configuration).mfaInstructions(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This API allows a user to validate who they are through email or a challenge. This is used as part of MFA recovery when the user wants to bind to a new device. Security on this is an initial access token as provided by the instructions endpoint.
         * @summary Request to verify your identity via email or an existing MFA device
         * @param {SendMfaSafeRecovery} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaSafeRecovery(body: SendMfaSafeRecovery, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MfaSafeRecovery>>> {
            const localVarAxiosArgs = await DeviceChallengeApiAxiosParamCreator(configuration).mfaSafeRecovery(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * You can poll UE Auth for the response to a challenge sent to a user.
         * @summary Poll UE Auth for a response to a challenge.
         * @param {string} group the auth group ID associated to your business account
         * @param {string} key the providerKey (id) returned by the challenge request
         * @param {string} account the account Id being challenged
         * @param {string} uid the interaction Id or state used to ensure secure interaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaStatus(group: string, key: string, account: string, uid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DeviceChallengeApiAxiosParamCreator(configuration).mfaStatus(group, key, account, uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeviceChallengeApi - factory interface
 * @export
 */
export const DeviceChallengeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * For an account with a saved state session, initiate a device based challenge.
         * @summary For an account with a saved state session, initiate a device based challenge.
         * @param {DeviceChallengeBody} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceSendChallenge(body: DeviceChallengeBody, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return DeviceChallengeApiFp(configuration).deviceSendChallenge(body, group, options).then((request) => request(axios, basePath));
        },
        /**
         * When configuring an MFA provider, you will likely need to provide a callback uri.
         * @summary Callback used by provider to communicate user approval or denial of challenge
         * @param {CallbackRequest} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaCallback(body: CallbackRequest, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DeviceChallengeApiFp(configuration).mfaCallback(body, group, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is multi-purpose, responding to a request based on which properties have been provided. See request object for details.
         * @summary Request an account be bound and instructions for device setup be provided
         * @param {MfaRequestBind} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaInstructions(body: MfaRequestBind, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MfaInstructions>> {
            return DeviceChallengeApiFp(configuration).mfaInstructions(body, group, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows a user to validate who they are through email or a challenge. This is used as part of MFA recovery when the user wants to bind to a new device. Security on this is an initial access token as provided by the instructions endpoint.
         * @summary Request to verify your identity via email or an existing MFA device
         * @param {SendMfaSafeRecovery} body 
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaSafeRecovery(body: SendMfaSafeRecovery, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MfaSafeRecovery>> {
            return DeviceChallengeApiFp(configuration).mfaSafeRecovery(body, group, options).then((request) => request(axios, basePath));
        },
        /**
         * You can poll UE Auth for the response to a challenge sent to a user.
         * @summary Poll UE Auth for a response to a challenge.
         * @param {string} group the auth group ID associated to your business account
         * @param {string} key the providerKey (id) returned by the challenge request
         * @param {string} account the account Id being challenged
         * @param {string} uid the interaction Id or state used to ensure secure interaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaStatus(group: string, key: string, account: string, uid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DeviceChallengeApiFp(configuration).mfaStatus(group, key, account, uid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceChallengeApi - object-oriented interface
 * @export
 * @class DeviceChallengeApi
 * @extends {BaseAPI}
 */
export class DeviceChallengeApi extends BaseAPI {
    /**
     * For an account with a saved state session, initiate a device based challenge.
     * @summary For an account with a saved state session, initiate a device based challenge.
     * @param {DeviceChallengeBody} body 
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChallengeApi
     */
    public async deviceSendChallenge(body: DeviceChallengeBody, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return DeviceChallengeApiFp(this.configuration).deviceSendChallenge(body, group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When configuring an MFA provider, you will likely need to provide a callback uri.
     * @summary Callback used by provider to communicate user approval or denial of challenge
     * @param {CallbackRequest} body 
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChallengeApi
     */
    public async mfaCallback(body: CallbackRequest, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DeviceChallengeApiFp(this.configuration).mfaCallback(body, group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This API is multi-purpose, responding to a request based on which properties have been provided. See request object for details.
     * @summary Request an account be bound and instructions for device setup be provided
     * @param {MfaRequestBind} body 
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChallengeApi
     */
    public async mfaInstructions(body: MfaRequestBind, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MfaInstructions>> {
        return DeviceChallengeApiFp(this.configuration).mfaInstructions(body, group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This API allows a user to validate who they are through email or a challenge. This is used as part of MFA recovery when the user wants to bind to a new device. Security on this is an initial access token as provided by the instructions endpoint.
     * @summary Request to verify your identity via email or an existing MFA device
     * @param {SendMfaSafeRecovery} body 
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChallengeApi
     */
    public async mfaSafeRecovery(body: SendMfaSafeRecovery, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MfaSafeRecovery>> {
        return DeviceChallengeApiFp(this.configuration).mfaSafeRecovery(body, group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can poll UE Auth for the response to a challenge sent to a user.
     * @summary Poll UE Auth for a response to a challenge.
     * @param {string} group the auth group ID associated to your business account
     * @param {string} key the providerKey (id) returned by the challenge request
     * @param {string} account the account Id being challenged
     * @param {string} uid the interaction Id or state used to ensure secure interaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChallengeApi
     */
    public async mfaStatus(group: string, key: string, account: string, uid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DeviceChallengeApiFp(this.configuration).mfaStatus(group, key, account, uid, options).then((request) => request(this.axios, this.basePath));
    }
}
