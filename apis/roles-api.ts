/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse20026 } from '../models';
import { InlineResponse20027 } from '../models';
import { InlineResponse2015 } from '../models';
import { RoleWrite } from '../models';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Scoped to AuthGroup and available across all organizations when the applicable Product is assocaited to them. In other words, all organizations will see this role in their list of product roles. Roles associate Permissions to Users. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Create a new globally available Role
         * @param {RoleWrite} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (body: RoleWrite, group: string, product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRole.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling createRole.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling createRole.');
            }
            const localVarPath = `/api/{group}/products/{product}/roles`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will allow you to delete any Role and will impact all Organizations in the AuthGroup, be careful. There are limits on Role deletions when the Accounts (users) have been assigned Roles. You may need to clear those assignments before you can delete.
         * @summary Delete any Role in your AuthGroup associated to a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (group: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling deleteRole.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling deleteRole.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRole.');
            }
            const localVarPath = `/api/{group}/products/{product}/roles/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scoped to an AuthGroup and available across Organizations and Products. This will return custom Role data specific to individual Organizations as well. Be very careful who has access to this API.
         * @summary Get all Roles across Products in your AuthGroup
         * @param {string} group Auth Group Id or name
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRolesAcrossProducts: async (group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getAllRolesAcrossProducts.');
            }
            const localVarPath = `/api/{group}/roles`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scoped to authgroup - this API will return Roles data across Organizations including custom Role information scoped to single Organizations. Be very careful who has access to this API endpoint.
         * @summary Get all available Roles for a given Product in your AuthGroup
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique user identifier
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductRoles: async (group: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getProductRoles.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getProductRoles.');
            }
            const localVarPath = `/api/{group}/products/{product}/roles`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scoped to the AuthGroup and available across Organizations - it is possible to request any Role.
         * @summary Return any Role by ID
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: async (group: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getRole.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling getRole.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getRole.');
            }
            const localVarPath = `/api/{group}/products/{product}/roles/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will let you update any Role, including its assocaited permissions. All organizations in the AuthGroup will be affected by this API, be careful. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Update any Role regardless of scope (AuthGroup or Organization)
         * @param {Array<any>} body Created user object
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (body: Array<any>, group: string, product: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRole.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling updateRole.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling updateRole.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateRole.');
            }
            const localVarPath = `/api/{group}/products/{product}/roles/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Scoped to AuthGroup and available across all organizations when the applicable Product is assocaited to them. In other words, all organizations will see this role in their list of product roles. Roles associate Permissions to Users. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Create a new globally available Role
         * @param {RoleWrite} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(body: RoleWrite, group: string, product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).createRole(body, group, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This will allow you to delete any Role and will impact all Organizations in the AuthGroup, be careful. There are limits on Role deletions when the Accounts (users) have been assigned Roles. You may need to clear those assignments before you can delete.
         * @summary Delete any Role in your AuthGroup associated to a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).deleteRole(group, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scoped to an AuthGroup and available across Organizations and Products. This will return custom Role data specific to individual Organizations as well. Be very careful who has access to this API.
         * @summary Get all Roles across Products in your AuthGroup
         * @param {string} group Auth Group Id or name
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRolesAcrossProducts(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20026>>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).getAllRolesAcrossProducts(group, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scoped to authgroup - this API will return Roles data across Organizations including custom Role information scoped to single Organizations. Be very careful who has access to this API endpoint.
         * @summary Get all available Roles for a given Product in your AuthGroup
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique user identifier
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductRoles(group: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20027>>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).getProductRoles(group, product, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scoped to the AuthGroup and available across Organizations - it is possible to request any Role.
         * @summary Return any Role by ID
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).getRole(group, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This API will let you update any Role, including its assocaited permissions. All organizations in the AuthGroup will be affected by this API, be careful. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Update any Role regardless of scope (AuthGroup or Organization)
         * @param {Array<any>} body Created user object
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(body: Array<any>, group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).updateRole(body, group, product, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Scoped to AuthGroup and available across all organizations when the applicable Product is assocaited to them. In other words, all organizations will see this role in their list of product roles. Roles associate Permissions to Users. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Create a new globally available Role
         * @param {RoleWrite} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(body: RoleWrite, group: string, product: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return RolesApiFp(configuration).createRole(body, group, product, options).then((request) => request(axios, basePath));
        },
        /**
         * This will allow you to delete any Role and will impact all Organizations in the AuthGroup, be careful. There are limits on Role deletions when the Accounts (users) have been assigned Roles. You may need to clear those assignments before you can delete.
         * @summary Delete any Role in your AuthGroup associated to a Product
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return RolesApiFp(configuration).deleteRole(group, product, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Scoped to an AuthGroup and available across Organizations and Products. This will return custom Role data specific to individual Organizations as well. Be very careful who has access to this API.
         * @summary Get all Roles across Products in your AuthGroup
         * @param {string} group Auth Group Id or name
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRolesAcrossProducts(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20026>> {
            return RolesApiFp(configuration).getAllRolesAcrossProducts(group, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * Scoped to authgroup - this API will return Roles data across Organizations including custom Role information scoped to single Organizations. Be very careful who has access to this API endpoint.
         * @summary Get all available Roles for a given Product in your AuthGroup
         * @param {string} group Auth Group Id or name
         * @param {string} product Unique user identifier
         * @param {string} [search] keyword search across roles - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductRoles(group: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20027>> {
            return RolesApiFp(configuration).getProductRoles(group, product, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * Scoped to the AuthGroup and available across Organizations - it is possible to request any Role.
         * @summary Return any Role by ID
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return RolesApiFp(configuration).getRole(group, product, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will let you update any Role, including its assocaited permissions. All organizations in the AuthGroup will be affected by this API, be careful. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
         * @summary Update any Role regardless of scope (AuthGroup or Organization)
         * @param {Array<any>} body Created user object
         * @param {string} group Auth Group Id or name
         * @param {string} product Id of the associated product
         * @param {string} id Id of the role in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(body: Array<any>, group: string, product: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return RolesApiFp(configuration).updateRole(body, group, product, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * Scoped to AuthGroup and available across all organizations when the applicable Product is assocaited to them. In other words, all organizations will see this role in their list of product roles. Roles associate Permissions to Users. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
     * @summary Create a new globally available Role
     * @param {RoleWrite} body Create a new role
     * @param {string} group Auth Group Id or name
     * @param {string} product Unique product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public async createRole(body: RoleWrite, group: string, product: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return RolesApiFp(this.configuration).createRole(body, group, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This will allow you to delete any Role and will impact all Organizations in the AuthGroup, be careful. There are limits on Role deletions when the Accounts (users) have been assigned Roles. You may need to clear those assignments before you can delete.
     * @summary Delete any Role in your AuthGroup associated to a Product
     * @param {string} group Auth Group Id or name
     * @param {string} product Id of the associated product
     * @param {string} id Id of the role in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public async deleteRole(group: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return RolesApiFp(this.configuration).deleteRole(group, product, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scoped to an AuthGroup and available across Organizations and Products. This will return custom Role data specific to individual Organizations as well. Be very careful who has access to this API.
     * @summary Get all Roles across Products in your AuthGroup
     * @param {string} group Auth Group Id or name
     * @param {string} [search] keyword search across roles - not part of oData
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public async getAllRolesAcrossProducts(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20026>> {
        return RolesApiFp(this.configuration).getAllRolesAcrossProducts(group, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scoped to authgroup - this API will return Roles data across Organizations including custom Role information scoped to single Organizations. Be very careful who has access to this API endpoint.
     * @summary Get all available Roles for a given Product in your AuthGroup
     * @param {string} group Auth Group Id or name
     * @param {string} product Unique user identifier
     * @param {string} [search] keyword search across roles - not part of oData
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public async getProductRoles(group: string, product: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20027>> {
        return RolesApiFp(this.configuration).getProductRoles(group, product, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scoped to the AuthGroup and available across Organizations - it is possible to request any Role.
     * @summary Return any Role by ID
     * @param {string} group Auth Group Id or name
     * @param {string} product Id of the associated product
     * @param {string} id Id of the role in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public async getRole(group: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return RolesApiFp(this.configuration).getRole(group, product, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This API will let you update any Role, including its assocaited permissions. All organizations in the AuthGroup will be affected by this API, be careful. There is a non-standard way of associating a permission to a Role. The property \"permissions\" takes an array of strings comprised of a concat of the Permission Ids and the Permission code. As an example, \"3fa85f64-5717-4562-b3fc-2c963f66afa6 user::read:own\" would be one string entry.
     * @summary Update any Role regardless of scope (AuthGroup or Organization)
     * @param {Array<any>} body Created user object
     * @param {string} group Auth Group Id or name
     * @param {string} product Id of the associated product
     * @param {string} id Id of the role in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public async updateRole(body: Array<any>, group: string, product: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return RolesApiFp(this.configuration).updateRole(body, group, product, id, options).then((request) => request(this.axios, this.basePath));
    }
}
