/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse2007 } from '../models';
import { SecuredProfileWrite } from '../models';
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This will return only your profile tied to your account id
         * @summary Retrieve your secured profile
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getProfile.');
            }
            const localVarPath = `/api/{group}/profile`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * You can retrieve your profile or one you have view access to
         * @summary Retrieve a secured profile by ID
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id account id of the profile owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileById: async (group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getProfileById.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProfileById.');
            }
            const localVarPath = `/api/{group}/profiles/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will delete only your secured profile tied to your account id
         * @summary Delete your secured profile
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProfile: async (group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling removeProfile.');
            }
            const localVarPath = `/api/{group}/profile`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update your secured profile tied to your account id.
         * @summary Update your secured profile
         * @param {Array<any>} body Profile data to be updated
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: async (body: Array<any>, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProfile.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling updateProfile.');
            }
            const localVarPath = `/api/{group}/profile`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * While Accounts themselves do not carry personal information, two concepts in UE Auth do: Secured Profiles and Organization User Profiles (as described here). Secured Profiles are entirely controlled by the Account holder (user) and not accessible by anyone other than that user. Secured Profile data can be requested but must always be actively approved and provided or denied by the User.
         * @summary Create a secured profile that only you (the account holder) can access or govern access to.
         * @param {SecuredProfileWrite} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeProfile: async (body: SecuredProfileWrite, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling writeProfile.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling writeProfile.');
            }
            const localVarPath = `/api/{group}/profile`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This will return only your profile tied to your account id
         * @summary Retrieve your secured profile
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).getProfile(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * You can retrieve your profile or one you have view access to
         * @summary Retrieve a secured profile by ID
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id account id of the profile owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileById(group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).getProfileById(group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This will delete only your secured profile tied to your account id
         * @summary Delete your secured profile
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProfile(group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).removeProfile(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update your secured profile tied to your account id.
         * @summary Update your secured profile
         * @param {Array<any>} body Profile data to be updated
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile(body: Array<any>, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).updateProfile(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * While Accounts themselves do not carry personal information, two concepts in UE Auth do: Secured Profiles and Organization User Profiles (as described here). Secured Profiles are entirely controlled by the Account holder (user) and not accessible by anyone other than that user. Secured Profile data can be requested but must always be actively approved and provided or denied by the User.
         * @summary Create a secured profile that only you (the account holder) can access or govern access to.
         * @param {SecuredProfileWrite} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeProfile(body: SecuredProfileWrite, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).writeProfile(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This will return only your profile tied to your account id
         * @summary Retrieve your secured profile
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return ProfilesApiFp(configuration).getProfile(group, options).then((request) => request(axios, basePath));
        },
        /**
         * You can retrieve your profile or one you have view access to
         * @summary Retrieve a secured profile by ID
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id account id of the profile owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileById(group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return ProfilesApiFp(configuration).getProfileById(group, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This will delete only your secured profile tied to your account id
         * @summary Delete your secured profile
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProfile(group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return ProfilesApiFp(configuration).removeProfile(group, options).then((request) => request(axios, basePath));
        },
        /**
         * Update your secured profile tied to your account id.
         * @summary Update your secured profile
         * @param {Array<any>} body Profile data to be updated
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile(body: Array<any>, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return ProfilesApiFp(configuration).updateProfile(body, group, options).then((request) => request(axios, basePath));
        },
        /**
         * While Accounts themselves do not carry personal information, two concepts in UE Auth do: Secured Profiles and Organization User Profiles (as described here). Secured Profiles are entirely controlled by the Account holder (user) and not accessible by anyone other than that user. Secured Profile data can be requested but must always be actively approved and provided or denied by the User.
         * @summary Create a secured profile that only you (the account holder) can access or govern access to.
         * @param {SecuredProfileWrite} body Profile data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeProfile(body: SecuredProfileWrite, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return ProfilesApiFp(configuration).writeProfile(body, group, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * This will return only your profile tied to your account id
     * @summary Retrieve your secured profile
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async getProfile(group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return ProfilesApiFp(this.configuration).getProfile(group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can retrieve your profile or one you have view access to
     * @summary Retrieve a secured profile by ID
     * @param {string} group the auth group ID associated to your business account
     * @param {string} id account id of the profile owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async getProfileById(group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return ProfilesApiFp(this.configuration).getProfileById(group, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This will delete only your secured profile tied to your account id
     * @summary Delete your secured profile
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async removeProfile(group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return ProfilesApiFp(this.configuration).removeProfile(group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update your secured profile tied to your account id.
     * @summary Update your secured profile
     * @param {Array<any>} body Profile data to be updated
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async updateProfile(body: Array<any>, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return ProfilesApiFp(this.configuration).updateProfile(body, group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * While Accounts themselves do not carry personal information, two concepts in UE Auth do: Secured Profiles and Organization User Profiles (as described here). Secured Profiles are entirely controlled by the Account holder (user) and not accessible by anyone other than that user. Secured Profile data can be requested but must always be actively approved and provided or denied by the User.
     * @summary Create a secured profile that only you (the account holder) can access or govern access to.
     * @param {SecuredProfileWrite} body Profile data to be written
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async writeProfile(body: SecuredProfileWrite, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return ProfilesApiFp(this.configuration).writeProfile(body, group, options).then((request) => request(this.axios, this.basePath));
    }
}
