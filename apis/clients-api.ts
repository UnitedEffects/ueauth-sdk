/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { GetClient } from '../models';
import { GetClients } from '../models';
/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API will bypass the OIDC /reg endpoint and allow an authorized caller from the AuthGroup to delete a Client.
         * @summary This will delete a Client
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id id of account type to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneClient: async (group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling deleteOneClient.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteOneClient.');
            }
            const localVarPath = `/api/{group}/client/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows the caller to get a list of every registered Client in the AuthGroup. Sensative information like the client_secret is ommitted.
         * @summary Retrieve all clients in your AuthGroup
         * @param {string} group the auth group ID associated to your business account
         * @param {string} [search] additional search key - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {string} [skip] oData skip Query
         * @param {string} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients: async (group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: string, top?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getClients.');
            }
            const localVarPath = `/api/{group}/clients`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will bypass the normally protected GET /reg/{id} as long as the caller has the correct permissions. This is a convenience API and not the same as the OIDC call on the /reg endpoint which may require a registration access token. This API will sanitize the response.
         * @summary Returns a single Client from within the AuthGroup
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id id of account type to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneClient: async (group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOneClient.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneClient.');
            }
            const localVarPath = `/api/{group}/client/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This API will bypass the OIDC /reg endpoint and allow an authorized caller from the AuthGroup to delete a Client.
         * @summary This will delete a Client
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id id of account type to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneClient(group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetClient>>> {
            const localVarAxiosArgs = await ClientsApiAxiosParamCreator(configuration).deleteOneClient(group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows the caller to get a list of every registered Client in the AuthGroup. Sensative information like the client_secret is ommitted.
         * @summary Retrieve all clients in your AuthGroup
         * @param {string} group the auth group ID associated to your business account
         * @param {string} [search] additional search key - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {string} [skip] oData skip Query
         * @param {string} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClients(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: string, top?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetClients>>> {
            const localVarAxiosArgs = await ClientsApiAxiosParamCreator(configuration).getClients(group, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This will bypass the normally protected GET /reg/{id} as long as the caller has the correct permissions. This is a convenience API and not the same as the OIDC call on the /reg endpoint which may require a registration access token. This API will sanitize the response.
         * @summary Returns a single Client from within the AuthGroup
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id id of account type to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneClient(group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetClient>>> {
            const localVarAxiosArgs = await ClientsApiAxiosParamCreator(configuration).getOneClient(group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This API will bypass the OIDC /reg endpoint and allow an authorized caller from the AuthGroup to delete a Client.
         * @summary This will delete a Client
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id id of account type to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneClient(group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetClient>> {
            return ClientsApiFp(configuration).deleteOneClient(group, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows the caller to get a list of every registered Client in the AuthGroup. Sensative information like the client_secret is ommitted.
         * @summary Retrieve all clients in your AuthGroup
         * @param {string} group the auth group ID associated to your business account
         * @param {string} [search] additional search key - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {string} [skip] oData skip Query
         * @param {string} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClients(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: string, top?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetClients>> {
            return ClientsApiFp(configuration).getClients(group, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * This will bypass the normally protected GET /reg/{id} as long as the caller has the correct permissions. This is a convenience API and not the same as the OIDC call on the /reg endpoint which may require a registration access token. This API will sanitize the response.
         * @summary Returns a single Client from within the AuthGroup
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id id of account type to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneClient(group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetClient>> {
            return ClientsApiFp(configuration).getOneClient(group, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * This API will bypass the OIDC /reg endpoint and allow an authorized caller from the AuthGroup to delete a Client.
     * @summary This will delete a Client
     * @param {string} group the auth group ID associated to your business account
     * @param {string} id id of account type to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public async deleteOneClient(group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetClient>> {
        return ClientsApiFp(this.configuration).deleteOneClient(group, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows the caller to get a list of every registered Client in the AuthGroup. Sensative information like the client_secret is ommitted.
     * @summary Retrieve all clients in your AuthGroup
     * @param {string} group the auth group ID associated to your business account
     * @param {string} [search] additional search key - not part of oData
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {string} [skip] oData skip Query
     * @param {string} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public async getClients(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: string, top?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetClients>> {
        return ClientsApiFp(this.configuration).getClients(group, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This will bypass the normally protected GET /reg/{id} as long as the caller has the correct permissions. This is a convenience API and not the same as the OIDC call on the /reg endpoint which may require a registration access token. This API will sanitize the response.
     * @summary Returns a single Client from within the AuthGroup
     * @param {string} group the auth group ID associated to your business account
     * @param {string} id id of account type to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public async getOneClient(group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetClient>> {
        return ClientsApiFp(this.configuration).getOneClient(group, id, options).then((request) => request(this.axios, this.basePath));
    }
}
