/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse20028 } from '../models';
import { InlineResponse2016 } from '../models';
import { WriteOrganization } from '../models';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all organizations (customers, departments, etc...) in an AuthGroup
         * @summary Get all Organizations
         * @param {string} group Auth Group Id or name
         * @param {string} [search] keyword search across records - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupOrganizationsGet: async (group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling apiGroupOrganizationsGet.');
            }
            const localVarPath = `/api/{group}/organizations`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filter !== undefined) {
                localVarQueryParameter['$filter'] = filter;
            }

            if (select !== undefined) {
                localVarQueryParameter['$select'] = select;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['$orderby'] = orderby;
            }

            if (skip !== undefined) {
                localVarQueryParameter['$skip'] = skip;
            }

            if (top !== undefined) {
                localVarQueryParameter['$top'] = top;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Organizations allow you to create subsets of the AuthGroup users for access to specific products and domains. The most common use case for an Organization would be to represent your Customers. You can also create Organizations to define subsets of users for internal departments or other groupings. Organizations represent the primary mechanism to determine product access. In the example of defining a Customer as an Organization, you can select which of your products that Customer has licensed and associate them to the Organization through the associatedProducts property. Every Organization automatically has an Administrative Domain created to allow access to the UEAuth product. It is not recommended that you (or the organizatino admin) add users to this Administrative Domain other than those who you wish to manage users, domains and roles for the Organization.
         * @summary Create an Organization inside your AuthGroup
         * @param {WriteOrganization} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupOrganizationsPost: async (body: WriteOrganization, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiGroupOrganizationsPost.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling apiGroupOrganizationsPost.');
            }
            const localVarPath = `/api/{group}/organizations`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * There are limits on the ability to delete an organization that has already been assigned to users.
         * @summary Delete an Organization
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrg: async (group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling deleteOrg.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteOrg.');
            }
            const localVarPath = `/api/{group}/organizations/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single Organization using its ID
         * @summary Get Organization by Id
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrg: async (group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrg.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOrg.');
            }
            const localVarPath = `/api/{group}/organizations/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an organization's information.
         * @summary Update an organization
         * @param {Array<any>} body JSON Patch specific to your account object
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrg: async (body: Array<any>, group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrg.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling updateOrg.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateOrg.');
            }
            const localVarPath = `/api/{group}/organizations/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns all organizations (customers, departments, etc...) in an AuthGroup
         * @summary Get all Organizations
         * @param {string} group Auth Group Id or name
         * @param {string} [search] keyword search across records - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupOrganizationsGet(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20028>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).apiGroupOrganizationsGet(group, search, filter, select, orderby, skip, top, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Organizations allow you to create subsets of the AuthGroup users for access to specific products and domains. The most common use case for an Organization would be to represent your Customers. You can also create Organizations to define subsets of users for internal departments or other groupings. Organizations represent the primary mechanism to determine product access. In the example of defining a Customer as an Organization, you can select which of your products that Customer has licensed and associate them to the Organization through the associatedProducts property. Every Organization automatically has an Administrative Domain created to allow access to the UEAuth product. It is not recommended that you (or the organizatino admin) add users to this Administrative Domain other than those who you wish to manage users, domains and roles for the Organization.
         * @summary Create an Organization inside your AuthGroup
         * @param {WriteOrganization} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupOrganizationsPost(body: WriteOrganization, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2016>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).apiGroupOrganizationsPost(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * There are limits on the ability to delete an organization that has already been assigned to users.
         * @summary Delete an Organization
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrg(group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2016>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).deleteOrg(group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a single Organization using its ID
         * @summary Get Organization by Id
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrg(group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2016>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).getOrg(group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an organization's information.
         * @summary Update an organization
         * @param {Array<any>} body JSON Patch specific to your account object
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrg(body: Array<any>, group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2016>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).updateOrg(body, group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns all organizations (customers, departments, etc...) in an AuthGroup
         * @summary Get all Organizations
         * @param {string} group Auth Group Id or name
         * @param {string} [search] keyword search across records - not part of oData
         * @param {string} [filter] oData filter Query
         * @param {string} [select] oData select Query
         * @param {string} [orderby] oData orderby Query
         * @param {number} [skip] oData skip Query
         * @param {number} [top] oData top Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupOrganizationsGet(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20028>> {
            return OrganizationsApiFp(configuration).apiGroupOrganizationsGet(group, search, filter, select, orderby, skip, top, options).then((request) => request(axios, basePath));
        },
        /**
         * Organizations allow you to create subsets of the AuthGroup users for access to specific products and domains. The most common use case for an Organization would be to represent your Customers. You can also create Organizations to define subsets of users for internal departments or other groupings. Organizations represent the primary mechanism to determine product access. In the example of defining a Customer as an Organization, you can select which of your products that Customer has licensed and associate them to the Organization through the associatedProducts property. Every Organization automatically has an Administrative Domain created to allow access to the UEAuth product. It is not recommended that you (or the organizatino admin) add users to this Administrative Domain other than those who you wish to manage users, domains and roles for the Organization.
         * @summary Create an Organization inside your AuthGroup
         * @param {WriteOrganization} body Create a new role
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupOrganizationsPost(body: WriteOrganization, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2016>> {
            return OrganizationsApiFp(configuration).apiGroupOrganizationsPost(body, group, options).then((request) => request(axios, basePath));
        },
        /**
         * There are limits on the ability to delete an organization that has already been assigned to users.
         * @summary Delete an Organization
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrg(group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2016>> {
            return OrganizationsApiFp(configuration).deleteOrg(group, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single Organization using its ID
         * @summary Get Organization by Id
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrg(group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2016>> {
            return OrganizationsApiFp(configuration).getOrg(group, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an organization's information.
         * @summary Update an organization
         * @param {Array<any>} body JSON Patch specific to your account object
         * @param {string} group Auth Group Id or name
         * @param {string} id organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrg(body: Array<any>, group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2016>> {
            return OrganizationsApiFp(configuration).updateOrg(body, group, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * Returns all organizations (customers, departments, etc...) in an AuthGroup
     * @summary Get all Organizations
     * @param {string} group Auth Group Id or name
     * @param {string} [search] keyword search across records - not part of oData
     * @param {string} [filter] oData filter Query
     * @param {string} [select] oData select Query
     * @param {string} [orderby] oData orderby Query
     * @param {number} [skip] oData skip Query
     * @param {number} [top] oData top Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async apiGroupOrganizationsGet(group: string, search?: string, filter?: string, select?: string, orderby?: string, skip?: number, top?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20028>> {
        return OrganizationsApiFp(this.configuration).apiGroupOrganizationsGet(group, search, filter, select, orderby, skip, top, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Organizations allow you to create subsets of the AuthGroup users for access to specific products and domains. The most common use case for an Organization would be to represent your Customers. You can also create Organizations to define subsets of users for internal departments or other groupings. Organizations represent the primary mechanism to determine product access. In the example of defining a Customer as an Organization, you can select which of your products that Customer has licensed and associate them to the Organization through the associatedProducts property. Every Organization automatically has an Administrative Domain created to allow access to the UEAuth product. It is not recommended that you (or the organizatino admin) add users to this Administrative Domain other than those who you wish to manage users, domains and roles for the Organization.
     * @summary Create an Organization inside your AuthGroup
     * @param {WriteOrganization} body Create a new role
     * @param {string} group Auth Group Id or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async apiGroupOrganizationsPost(body: WriteOrganization, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2016>> {
        return OrganizationsApiFp(this.configuration).apiGroupOrganizationsPost(body, group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * There are limits on the ability to delete an organization that has already been assigned to users.
     * @summary Delete an Organization
     * @param {string} group Auth Group Id or name
     * @param {string} id organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async deleteOrg(group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2016>> {
        return OrganizationsApiFp(this.configuration).deleteOrg(group, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return a single Organization using its ID
     * @summary Get Organization by Id
     * @param {string} group Auth Group Id or name
     * @param {string} id organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrg(group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2016>> {
        return OrganizationsApiFp(this.configuration).getOrg(group, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an organization's information.
     * @summary Update an organization
     * @param {Array<any>} body JSON Patch specific to your account object
     * @param {string} group Auth Group Id or name
     * @param {string} id organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async updateOrg(body: Array<any>, group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2016>> {
        return OrganizationsApiFp(this.configuration).updateOrg(body, group, id, options).then((request) => request(this.axios, this.basePath));
    }
}
