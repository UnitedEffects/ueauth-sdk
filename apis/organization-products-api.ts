/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { InlineResponse20023 } from '../models';
import { InlineResponse20024 } from '../models';
/**
 * OrganizationProductsApi - axios parameter creator
 * @export
 */
export const OrganizationProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Query a single Product by ID within a domain
         * @summary Get a domain associated Product's Info
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} domain domain context
         * @param {string} id Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgDomainProduct: async (group: string, org: string, domain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgDomainProduct.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgDomainProduct.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling getOrgDomainProduct.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOrgDomainProduct.');
            }
            const localVarPath = `/api/{group}/organization/{org}/domain/{domain}/products/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Products defined as part of an Organization's Domain
         * @summary Get all Products associated to an Organization's Domain
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} domain domain context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgDomainProducts: async (group: string, org: string, domain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgDomainProducts.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgDomainProducts.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling getOrgDomainProducts.');
            }
            const localVarPath = `/api/{group}/organization/{org}/domain/{domain}/products`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query a single Product by ID within an Organization
         * @summary Get an organization associated Product's Info
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} id Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgProduct: async (group: string, org: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgProduct.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgProduct.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOrgProduct.');
            }
            const localVarPath = `/api/{group}/organization/{org}/products/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Products defined as part of your Organization
         * @summary Get all Products associated to an Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgProducts: async (group: string, org: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getOrgProducts.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getOrgProducts.');
            }
            const localVarPath = `/api/{group}/organization/{org}/products`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationProductsApi - functional programming interface
 * @export
 */
export const OrganizationProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Query a single Product by ID within a domain
         * @summary Get a domain associated Product's Info
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} domain domain context
         * @param {string} id Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgDomainProduct(group: string, org: string, domain: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20024>>> {
            const localVarAxiosArgs = await OrganizationProductsApiAxiosParamCreator(configuration).getOrgDomainProduct(group, org, domain, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return all Products defined as part of an Organization's Domain
         * @summary Get all Products associated to an Organization's Domain
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} domain domain context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgDomainProducts(group: string, org: string, domain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>> {
            const localVarAxiosArgs = await OrganizationProductsApiAxiosParamCreator(configuration).getOrgDomainProducts(group, org, domain, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query a single Product by ID within an Organization
         * @summary Get an organization associated Product's Info
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} id Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgProduct(group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20024>>> {
            const localVarAxiosArgs = await OrganizationProductsApiAxiosParamCreator(configuration).getOrgProduct(group, org, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return all Products defined as part of your Organization
         * @summary Get all Products associated to an Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgProducts(group: string, org: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>> {
            const localVarAxiosArgs = await OrganizationProductsApiAxiosParamCreator(configuration).getOrgProducts(group, org, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationProductsApi - factory interface
 * @export
 */
export const OrganizationProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Query a single Product by ID within a domain
         * @summary Get a domain associated Product's Info
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} domain domain context
         * @param {string} id Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgDomainProduct(group: string, org: string, domain: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20024>> {
            return OrganizationProductsApiFp(configuration).getOrgDomainProduct(group, org, domain, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Products defined as part of an Organization's Domain
         * @summary Get all Products associated to an Organization's Domain
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} domain domain context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgDomainProducts(group: string, org: string, domain: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>> {
            return OrganizationProductsApiFp(configuration).getOrgDomainProducts(group, org, domain, options).then((request) => request(axios, basePath));
        },
        /**
         * Query a single Product by ID within an Organization
         * @summary Get an organization associated Product's Info
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {string} id Unique product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgProduct(group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20024>> {
            return OrganizationProductsApiFp(configuration).getOrgProduct(group, org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Products defined as part of your Organization
         * @summary Get all Products associated to an Organization
         * @param {string} group Auth Group Id or name
         * @param {string} org organization context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgProducts(group: string, org: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>> {
            return OrganizationProductsApiFp(configuration).getOrgProducts(group, org, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationProductsApi - object-oriented interface
 * @export
 * @class OrganizationProductsApi
 * @extends {BaseAPI}
 */
export class OrganizationProductsApi extends BaseAPI {
    /**
     * Query a single Product by ID within a domain
     * @summary Get a domain associated Product's Info
     * @param {string} group Auth Group Id or name
     * @param {string} org organization context
     * @param {string} domain domain context
     * @param {string} id Unique product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationProductsApi
     */
    public async getOrgDomainProduct(group: string, org: string, domain: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20024>> {
        return OrganizationProductsApiFp(this.configuration).getOrgDomainProduct(group, org, domain, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return all Products defined as part of an Organization's Domain
     * @summary Get all Products associated to an Organization's Domain
     * @param {string} group Auth Group Id or name
     * @param {string} org organization context
     * @param {string} domain domain context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationProductsApi
     */
    public async getOrgDomainProducts(group: string, org: string, domain: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20023>> {
        return OrganizationProductsApiFp(this.configuration).getOrgDomainProducts(group, org, domain, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query a single Product by ID within an Organization
     * @summary Get an organization associated Product's Info
     * @param {string} group Auth Group Id or name
     * @param {string} org organization context
     * @param {string} id Unique product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationProductsApi
     */
    public async getOrgProduct(group: string, org: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20024>> {
        return OrganizationProductsApiFp(this.configuration).getOrgProduct(group, org, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return all Products defined as part of your Organization
     * @summary Get all Products associated to an Organization
     * @param {string} group Auth Group Id or name
     * @param {string} org organization context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationProductsApi
     */
    public async getOrgProducts(group: string, org: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20023>> {
        return OrganizationProductsApiFp(this.configuration).getOrgProducts(group, org, options).then((request) => request(this.axios, this.basePath));
    }
}
