/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultError } from '../models';
import { GetAccount } from '../models';
import { GetClient } from '../models';
import { GetGroup } from '../models';
import { Operations } from '../models';
import { PasswordReset } from '../models';
import { UserOperations } from '../models';
import { VerifyEmail } from '../models';
/**
 * OperationsApi - axios parameter creator
 * @export
 */
export const OperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Execute operations against a client. Currently supports - rotate_secret & rotate_registration_access_token
         * @summary Execute operations against a client
         * @param {Operations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id the client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientOperations: async (body: Operations, group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling clientOperations.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling clientOperations.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling clientOperations.');
            }
            const localVarPath = `/api/{group}/operations/client/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute operations against a auth group (only rotate_keys and rotate_cookie_keys are currently supported)
         * @summary Execute operations against a auth group (only rotate_keys and rotate_cookie_keys are currently supported)
         * @param {Operations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupOperations: async (body: Operations, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupOperations.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling groupOperations.');
            }
            const localVarPath = `/api/{group}/operations`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute operations against a user. Currently supports - verify_account, reset_password, generate_password
         * @summary Execute operations against a user
         * @param {UserOperations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id the user/account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOperations: async (body: UserOperations, group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userOperations.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling userOperations.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userOperations.');
            }
            const localVarPath = `/api/{group}/operations/user/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute operations against a user within an organization. Currently supports - verify_account, reset_password
         * @summary Execute operations against a user within an organization
         * @param {UserOperations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization id
         * @param {string} id the user/account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOperationsByOrg: async (body: UserOperations, group: string, org: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userOperationsByOrg.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling userOperationsByOrg.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling userOperationsByOrg.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userOperationsByOrg.');
            }
            const localVarPath = `/api/{group}/operations/organization/{org}/user/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiate password reset for an account. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
         * @summary Initiate password reset for an account. API does not return anything. Requires Notification Plugin to be working.
         * @param {PasswordReset} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordReset: async (body: PasswordReset, group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userPasswordReset.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling userPasswordReset.');
            }
            const localVarPath = `/api/{group}/operations/reset-user-password`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Resends a verification email to the user. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
         * @summary Resends a verification email to the user. API does not return anything. Requires Notification Plugin to be working.
         * @param {string} group the auth group ID associated to your business account
         * @param {VerifyEmail} [body] Account data to be written
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userVerifyEmail: async (group: string, body?: VerifyEmail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling userVerifyEmail.');
            }
            const localVarPath = `/api/{group}/operations/resend-verify-email`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationsApi - functional programming interface
 * @export
 */
export const OperationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Execute operations against a client. Currently supports - rotate_secret & rotate_registration_access_token
         * @summary Execute operations against a client
         * @param {Operations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id the client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientOperations(body: Operations, group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetClient>>> {
            const localVarAxiosArgs = await OperationsApiAxiosParamCreator(configuration).clientOperations(body, group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Execute operations against a auth group (only rotate_keys and rotate_cookie_keys are currently supported)
         * @summary Execute operations against a auth group (only rotate_keys and rotate_cookie_keys are currently supported)
         * @param {Operations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupOperations(body: Operations, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetGroup>>> {
            const localVarAxiosArgs = await OperationsApiAxiosParamCreator(configuration).groupOperations(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Execute operations against a user. Currently supports - verify_account, reset_password, generate_password
         * @summary Execute operations against a user
         * @param {UserOperations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id the user/account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOperations(body: UserOperations, group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetAccount>>> {
            const localVarAxiosArgs = await OperationsApiAxiosParamCreator(configuration).userOperations(body, group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Execute operations against a user within an organization. Currently supports - verify_account, reset_password
         * @summary Execute operations against a user within an organization
         * @param {UserOperations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization id
         * @param {string} id the user/account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOperationsByOrg(body: UserOperations, group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetAccount>>> {
            const localVarAxiosArgs = await OperationsApiAxiosParamCreator(configuration).userOperationsByOrg(body, group, org, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Initiate password reset for an account. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
         * @summary Initiate password reset for an account. API does not return anything. Requires Notification Plugin to be working.
         * @param {PasswordReset} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPasswordReset(body: PasswordReset, group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OperationsApiAxiosParamCreator(configuration).userPasswordReset(body, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Resends a verification email to the user. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
         * @summary Resends a verification email to the user. API does not return anything. Requires Notification Plugin to be working.
         * @param {string} group the auth group ID associated to your business account
         * @param {VerifyEmail} [body] Account data to be written
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userVerifyEmail(group: string, body?: VerifyEmail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OperationsApiAxiosParamCreator(configuration).userVerifyEmail(group, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OperationsApi - factory interface
 * @export
 */
export const OperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Execute operations against a client. Currently supports - rotate_secret & rotate_registration_access_token
         * @summary Execute operations against a client
         * @param {Operations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id the client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientOperations(body: Operations, group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetClient>> {
            return OperationsApiFp(configuration).clientOperations(body, group, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute operations against a auth group (only rotate_keys and rotate_cookie_keys are currently supported)
         * @summary Execute operations against a auth group (only rotate_keys and rotate_cookie_keys are currently supported)
         * @param {Operations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupOperations(body: Operations, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetGroup>> {
            return OperationsApiFp(configuration).groupOperations(body, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute operations against a user. Currently supports - verify_account, reset_password, generate_password
         * @summary Execute operations against a user
         * @param {UserOperations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id the user/account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOperations(body: UserOperations, group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetAccount>> {
            return OperationsApiFp(configuration).userOperations(body, group, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute operations against a user within an organization. Currently supports - verify_account, reset_password
         * @summary Execute operations against a user within an organization
         * @param {UserOperations} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization id
         * @param {string} id the user/account id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOperationsByOrg(body: UserOperations, group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetAccount>> {
            return OperationsApiFp(configuration).userOperationsByOrg(body, group, org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiate password reset for an account. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
         * @summary Initiate password reset for an account. API does not return anything. Requires Notification Plugin to be working.
         * @param {PasswordReset} body Account data to be written
         * @param {string} group the auth group ID associated to your business account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPasswordReset(body: PasswordReset, group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OperationsApiFp(configuration).userPasswordReset(body, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Resends a verification email to the user. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
         * @summary Resends a verification email to the user. API does not return anything. Requires Notification Plugin to be working.
         * @param {string} group the auth group ID associated to your business account
         * @param {VerifyEmail} [body] Account data to be written
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userVerifyEmail(group: string, body?: VerifyEmail, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OperationsApiFp(configuration).userVerifyEmail(group, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OperationsApi - object-oriented interface
 * @export
 * @class OperationsApi
 * @extends {BaseAPI}
 */
export class OperationsApi extends BaseAPI {
    /**
     * Execute operations against a client. Currently supports - rotate_secret & rotate_registration_access_token
     * @summary Execute operations against a client
     * @param {Operations} body Account data to be written
     * @param {string} group the auth group ID associated to your business account
     * @param {string} id the client id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public async clientOperations(body: Operations, group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetClient>> {
        return OperationsApiFp(this.configuration).clientOperations(body, group, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Execute operations against a auth group (only rotate_keys and rotate_cookie_keys are currently supported)
     * @summary Execute operations against a auth group (only rotate_keys and rotate_cookie_keys are currently supported)
     * @param {Operations} body Account data to be written
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public async groupOperations(body: Operations, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetGroup>> {
        return OperationsApiFp(this.configuration).groupOperations(body, group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Execute operations against a user. Currently supports - verify_account, reset_password, generate_password
     * @summary Execute operations against a user
     * @param {UserOperations} body Account data to be written
     * @param {string} group the auth group ID associated to your business account
     * @param {string} id the user/account id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public async userOperations(body: UserOperations, group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetAccount>> {
        return OperationsApiFp(this.configuration).userOperations(body, group, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Execute operations against a user within an organization. Currently supports - verify_account, reset_password
     * @summary Execute operations against a user within an organization
     * @param {UserOperations} body Account data to be written
     * @param {string} group the auth group ID associated to your business account
     * @param {string} org the organization id
     * @param {string} id the user/account id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public async userOperationsByOrg(body: UserOperations, group: string, org: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetAccount>> {
        return OperationsApiFp(this.configuration).userOperationsByOrg(body, group, org, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiate password reset for an account. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
     * @summary Initiate password reset for an account. API does not return anything. Requires Notification Plugin to be working.
     * @param {PasswordReset} body Account data to be written
     * @param {string} group the auth group ID associated to your business account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public async userPasswordReset(body: PasswordReset, group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OperationsApiFp(this.configuration).userPasswordReset(body, group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Resends a verification email to the user. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
     * @summary Resends a verification email to the user. API does not return anything. Requires Notification Plugin to be working.
     * @param {string} group the auth group ID associated to your business account
     * @param {VerifyEmail} [body] Account data to be written
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public async userVerifyEmail(group: string, body?: VerifyEmail, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OperationsApiFp(this.configuration).userVerifyEmail(group, body, options).then((request) => request(this.axios, this.basePath));
    }
}
