/* tslint:disable */
/* eslint-disable */
/**
 * ue-auth
 * UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2023, all rights reserved.<br><br> As a general reference, this provider implements the following OIDC endpoints. All OpenID Connect schema specific endpoints follow the pattern <code>/{group}/path</code>.<br>UE Auth identity and access endpoints follow the pattern <code>/api/{group}/path</code>. Full documentation on the OpenID Connect specification can be found here: <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br> check_session: '/{group}/session/check',<br> code_verification: '/{group}/device',<br> device_authorization: '/{group}/device/auth',<br> end_session: '/{group}/session/end',<br> introspection: '/{group}/token/introspection',<br> initial_access: '/{group}/token/initial_access',<br> jwks: '/{group}/jwks',<br> pushed_authorization_request: '/{group}/request',<br> registration: '/{group}/reg',<br> revocation: '/{group}/token/revocation',<br> token: '/{group}/token',<br> userinfo: '/{group}/me'</code><br><br> <small>Not all of the above endpoints are detailed with contracts in this API documentation. Please reference the <a href='https://openid.net/developers/specs/'>OIDC</a> docs for any path specs not shown.</small><br><br> <h2>Query and Patch Standards</h2>This API uses <a href='https://www.odata.org/documentation/'>oData</a> and <a href='http://jsonpatch.com/'>JSON Patch</a> as standards for most paginated GET and PATCH methods. You may wish to review these standards.
 *
 * OpenAPI spec version: 1.32.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountIdBody } from '../models';
import { DefaultError } from '../models';
import { InlineResponse20010 } from '../models';
import { InlineResponse20011 } from '../models';
import { InlineResponse20013 } from '../models';
import { InlineResponse20014 } from '../models';
import { InlineResponse20015 } from '../models';
import { InlineResponse20016 } from '../models';
import { InlineResponse20017 } from '../models';
import { InlineResponse20018 } from '../models';
import { InlineResponse20019 } from '../models';
import { OrgTermsBody } from '../models';
/**
 * AccountDashboardApi - axios parameter creator
 * @export
 */
export const AccountDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows a user to agree to the terms of access imposed by an organization, or decline and remove all access from that organization.
         * @summary Accept or decline terms of access for an organization. Declining will remove you from the organization.
         * @param {OrgTermsBody} body 
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization id access is being applied to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptOrDeclineOrg: async (body: OrgTermsBody, group: string, org: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling acceptOrDeclineOrg.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling acceptOrDeclineOrg.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling acceptOrDeclineOrg.');
            }
            const localVarPath = `/api/{group}/access/organizations/{org}/terms`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Even though the Organization Account Profile is controlled by the Org, Accounts can still see that the org has their data and request that data be removed at any time. Use this API to see which Organizations have an Org Account Profile tied to you and the status of any requests you've made.
         * @summary As an Account holder, you can view all Org Profiles tied to your Account, regardless of Org Access
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id your Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrgProfiles: async (group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getAllOrgProfiles.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllOrgProfiles.');
            }
            const localVarPath = `/api/{group}/organizations/profiles/account/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to view a notification by id if the recipientUserId is their own user id
         * @summary Allows a user to view a single notification that was sent to them only
         * @param {string} group Auth Group Id or name
         * @param {string} id Id of the notification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyNotification: async (group: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getMyNotification.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMyNotification.');
            }
            const localVarPath = `/api/{group}/access/my/notification/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * View all notifications not yet expired (ttl) with your user Id as the recipient
         * @summary Allows a user to request any notifications sent to them
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyNotifications: async (group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getMyNotifications.');
            }
            const localVarPath = `/api/{group}/access/my/notifications`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query details about the organizations you have access to. They must be present on your token for this to work, which means the token was requested with the scope access or access::organization
         * @summary Allows a user to view detailed information about any organizations on their token
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyOrgDetails: async (group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getMyOrgDetails.');
            }
            const localVarPath = `/api/{group}/access/my/organizations`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * When an organization is applied to a user, it may be fully functional immediately (providing full access) or it may require the user to accept Terms of Access. This API allows the user to view the state of those organizations so the user can accept, decline or otherwise take action with regards to their account and information relative to organizations.
         * @summary Allows a user to view their account organizations and the state of those organizations
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyOrgs: async (group: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getMyOrgs.');
            }
            const localVarPath = `/api/{group}/access/organizations`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will return an object array of all the b2c products the Auth Group has and all of the b2b products within the context of the organization. The data is derived from the token only.
         * @summary Allows a user to view all products within the context of one org to which they have access and can be linked
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {boolean} [includeCore] Include Core B2B products in returned list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProducts: async (group: string, org: string, includeCore?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getMyProducts.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling getMyProducts.');
            }
            const localVarPath = `/api/{group}/access/my/organizations/{org}/products`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (includeCore !== undefined) {
                localVarQueryParameter['includeCore'] = includeCore;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will return all of the access information available for a specific user. It is not recommended that anyone other than AuthGroup administrators be given permissions to this endpoint.
         * @summary Query the organizations, products, roles and permissions of a user
         * @param {string} group Auth Group Id or name
         * @param {string} id Unique user identifier
         * @param {string} [org] allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context
         * @param {string} [domain] if ID provided, it restricts the response to this domain
         * @param {string} [product] if ID provided, it restricts the response to this product
         * @param {boolean} [includeMiscRoles] these are roles attributed to the user that do not correlate to the domains or products provided access
         * @param {boolean} [excludePermissions] flag to let us know to return both roles and permissions, or just roles
         * @param {boolean} [minimized] if true, this creates arrays of ids in string form to reduce the size of the data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccess: async (group: string, id: string, org?: string, domain?: string, product?: string, includeMiscRoles?: boolean, excludePermissions?: boolean, minimized?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling getUserAccess.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserAccess.');
            }
            const localVarPath = `/api/{group}/access/account/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (includeMiscRoles !== undefined) {
                localVarQueryParameter['includeMiscRoles'] = includeMiscRoles;
            }

            if (excludePermissions !== undefined) {
                localVarQueryParameter['excludePermissions'] = excludePermissions;
            }

            if (minimized !== undefined) {
                localVarQueryParameter['minimized'] = minimized;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Even though the Organization Account Profile is controlled by the Org, Accounts can still see that the org has their data and request that data be removed at any time. Use this API to request the removal or clear the request. You can reference yourself with 'me' or if you have permissions, any Account ID.
         * @summary As an Account holder, request that an Organization delete your Org Profile, regardless of your access
         * @param {AccountIdBody} body Profile data request to the Organization
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id your Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestToOrgProfile: async (body: AccountIdBody, group: string, org: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling requestToOrgProfile.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling requestToOrgProfile.');
            }
            // verify required parameter 'org' is not null or undefined
            if (org === null || org === undefined) {
                throw new RequiredError('org','Required parameter org was null or undefined when calling requestToOrgProfile.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling requestToOrgProfile.');
            }
            const localVarPath = `/api/{group}/organizations/{org}/profiles/account/{id}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            // authentication openId required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountDashboardApi - functional programming interface
 * @export
 */
export const AccountDashboardApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This API allows a user to agree to the terms of access imposed by an organization, or decline and remove all access from that organization.
         * @summary Accept or decline terms of access for an organization. Declining will remove you from the organization.
         * @param {OrgTermsBody} body 
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization id access is being applied to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptOrDeclineOrg(body: OrgTermsBody, group: string, org: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20015>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).acceptOrDeclineOrg(body, group, org, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Even though the Organization Account Profile is controlled by the Org, Accounts can still see that the org has their data and request that data be removed at any time. Use this API to see which Organizations have an Org Account Profile tied to you and the status of any requests you've made.
         * @summary As an Account holder, you can view all Org Profiles tied to your Account, regardless of Org Access
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id your Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrgProfiles(group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).getAllOrgProfiles(group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows a user to view a notification by id if the recipientUserId is their own user id
         * @summary Allows a user to view a single notification that was sent to them only
         * @param {string} group Auth Group Id or name
         * @param {string} id Id of the notification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyNotification(group: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20019>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).getMyNotification(group, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View all notifications not yet expired (ttl) with your user Id as the recipient
         * @summary Allows a user to request any notifications sent to them
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyNotifications(group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20018>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).getMyNotifications(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query details about the organizations you have access to. They must be present on your token for this to work, which means the token was requested with the scope access or access::organization
         * @summary Allows a user to view detailed information about any organizations on their token
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyOrgDetails(group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20017>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).getMyOrgDetails(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * When an organization is applied to a user, it may be fully functional immediately (providing full access) or it may require the user to accept Terms of Access. This API allows the user to view the state of those organizations so the user can accept, decline or otherwise take action with regards to their account and information relative to organizations.
         * @summary Allows a user to view their account organizations and the state of those organizations
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyOrgs(group: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20014>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).getMyOrgs(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This will return an object array of all the b2c products the Auth Group has and all of the b2b products within the context of the organization. The data is derived from the token only.
         * @summary Allows a user to view all products within the context of one org to which they have access and can be linked
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {boolean} [includeCore] Include Core B2B products in returned list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyProducts(group: string, org: string, includeCore?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20016>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).getMyProducts(group, org, includeCore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This API will return all of the access information available for a specific user. It is not recommended that anyone other than AuthGroup administrators be given permissions to this endpoint.
         * @summary Query the organizations, products, roles and permissions of a user
         * @param {string} group Auth Group Id or name
         * @param {string} id Unique user identifier
         * @param {string} [org] allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context
         * @param {string} [domain] if ID provided, it restricts the response to this domain
         * @param {string} [product] if ID provided, it restricts the response to this product
         * @param {boolean} [includeMiscRoles] these are roles attributed to the user that do not correlate to the domains or products provided access
         * @param {boolean} [excludePermissions] flag to let us know to return both roles and permissions, or just roles
         * @param {boolean} [minimized] if true, this creates arrays of ids in string form to reduce the size of the data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAccess(group: string, id: string, org?: string, domain?: string, product?: string, includeMiscRoles?: boolean, excludePermissions?: boolean, minimized?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20013>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).getUserAccess(group, id, org, domain, product, includeMiscRoles, excludePermissions, minimized, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Even though the Organization Account Profile is controlled by the Org, Accounts can still see that the org has their data and request that data be removed at any time. Use this API to request the removal or clear the request. You can reference yourself with 'me' or if you have permissions, any Account ID.
         * @summary As an Account holder, request that an Organization delete your Org Profile, regardless of your access
         * @param {AccountIdBody} body Profile data request to the Organization
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id your Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestToOrgProfile(body: AccountIdBody, group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20011>>> {
            const localVarAxiosArgs = await AccountDashboardApiAxiosParamCreator(configuration).requestToOrgProfile(body, group, org, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountDashboardApi - factory interface
 * @export
 */
export const AccountDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This API allows a user to agree to the terms of access imposed by an organization, or decline and remove all access from that organization.
         * @summary Accept or decline terms of access for an organization. Declining will remove you from the organization.
         * @param {OrgTermsBody} body 
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization id access is being applied to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptOrDeclineOrg(body: OrgTermsBody, group: string, org: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20015>> {
            return AccountDashboardApiFp(configuration).acceptOrDeclineOrg(body, group, org, options).then((request) => request(axios, basePath));
        },
        /**
         * Even though the Organization Account Profile is controlled by the Org, Accounts can still see that the org has their data and request that data be removed at any time. Use this API to see which Organizations have an Org Account Profile tied to you and the status of any requests you've made.
         * @summary As an Account holder, you can view all Org Profiles tied to your Account, regardless of Org Access
         * @param {string} group the auth group ID associated to your business account
         * @param {string} id your Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrgProfiles(group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountDashboardApiFp(configuration).getAllOrgProfiles(group, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to view a notification by id if the recipientUserId is their own user id
         * @summary Allows a user to view a single notification that was sent to them only
         * @param {string} group Auth Group Id or name
         * @param {string} id Id of the notification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyNotification(group: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20019>> {
            return AccountDashboardApiFp(configuration).getMyNotification(group, id, options).then((request) => request(axios, basePath));
        },
        /**
         * View all notifications not yet expired (ttl) with your user Id as the recipient
         * @summary Allows a user to request any notifications sent to them
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyNotifications(group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20018>> {
            return AccountDashboardApiFp(configuration).getMyNotifications(group, options).then((request) => request(axios, basePath));
        },
        /**
         * Query details about the organizations you have access to. They must be present on your token for this to work, which means the token was requested with the scope access or access::organization
         * @summary Allows a user to view detailed information about any organizations on their token
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyOrgDetails(group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20017>> {
            return AccountDashboardApiFp(configuration).getMyOrgDetails(group, options).then((request) => request(axios, basePath));
        },
        /**
         * When an organization is applied to a user, it may be fully functional immediately (providing full access) or it may require the user to accept Terms of Access. This API allows the user to view the state of those organizations so the user can accept, decline or otherwise take action with regards to their account and information relative to organizations.
         * @summary Allows a user to view their account organizations and the state of those organizations
         * @param {string} group Auth Group Id or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyOrgs(group: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20014>> {
            return AccountDashboardApiFp(configuration).getMyOrgs(group, options).then((request) => request(axios, basePath));
        },
        /**
         * This will return an object array of all the b2c products the Auth Group has and all of the b2b products within the context of the organization. The data is derived from the token only.
         * @summary Allows a user to view all products within the context of one org to which they have access and can be linked
         * @param {string} group Auth Group Id or name
         * @param {string} org Organization context
         * @param {boolean} [includeCore] Include Core B2B products in returned list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyProducts(group: string, org: string, includeCore?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20016>> {
            return AccountDashboardApiFp(configuration).getMyProducts(group, org, includeCore, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will return all of the access information available for a specific user. It is not recommended that anyone other than AuthGroup administrators be given permissions to this endpoint.
         * @summary Query the organizations, products, roles and permissions of a user
         * @param {string} group Auth Group Id or name
         * @param {string} id Unique user identifier
         * @param {string} [org] allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context
         * @param {string} [domain] if ID provided, it restricts the response to this domain
         * @param {string} [product] if ID provided, it restricts the response to this product
         * @param {boolean} [includeMiscRoles] these are roles attributed to the user that do not correlate to the domains or products provided access
         * @param {boolean} [excludePermissions] flag to let us know to return both roles and permissions, or just roles
         * @param {boolean} [minimized] if true, this creates arrays of ids in string form to reduce the size of the data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAccess(group: string, id: string, org?: string, domain?: string, product?: string, includeMiscRoles?: boolean, excludePermissions?: boolean, minimized?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20013>> {
            return AccountDashboardApiFp(configuration).getUserAccess(group, id, org, domain, product, includeMiscRoles, excludePermissions, minimized, options).then((request) => request(axios, basePath));
        },
        /**
         * Even though the Organization Account Profile is controlled by the Org, Accounts can still see that the org has their data and request that data be removed at any time. Use this API to request the removal or clear the request. You can reference yourself with 'me' or if you have permissions, any Account ID.
         * @summary As an Account holder, request that an Organization delete your Org Profile, regardless of your access
         * @param {AccountIdBody} body Profile data request to the Organization
         * @param {string} group the auth group ID associated to your business account
         * @param {string} org the organization ID
         * @param {string} id your Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestToOrgProfile(body: AccountIdBody, group: string, org: string, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>> {
            return AccountDashboardApiFp(configuration).requestToOrgProfile(body, group, org, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountDashboardApi - object-oriented interface
 * @export
 * @class AccountDashboardApi
 * @extends {BaseAPI}
 */
export class AccountDashboardApi extends BaseAPI {
    /**
     * This API allows a user to agree to the terms of access imposed by an organization, or decline and remove all access from that organization.
     * @summary Accept or decline terms of access for an organization. Declining will remove you from the organization.
     * @param {OrgTermsBody} body 
     * @param {string} group Auth Group Id or name
     * @param {string} org Organization id access is being applied to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async acceptOrDeclineOrg(body: OrgTermsBody, group: string, org: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20015>> {
        return AccountDashboardApiFp(this.configuration).acceptOrDeclineOrg(body, group, org, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Even though the Organization Account Profile is controlled by the Org, Accounts can still see that the org has their data and request that data be removed at any time. Use this API to see which Organizations have an Org Account Profile tied to you and the status of any requests you've made.
     * @summary As an Account holder, you can view all Org Profiles tied to your Account, regardless of Org Access
     * @param {string} group the auth group ID associated to your business account
     * @param {string} id your Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async getAllOrgProfiles(group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountDashboardApiFp(this.configuration).getAllOrgProfiles(group, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user to view a notification by id if the recipientUserId is their own user id
     * @summary Allows a user to view a single notification that was sent to them only
     * @param {string} group Auth Group Id or name
     * @param {string} id Id of the notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async getMyNotification(group: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20019>> {
        return AccountDashboardApiFp(this.configuration).getMyNotification(group, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * View all notifications not yet expired (ttl) with your user Id as the recipient
     * @summary Allows a user to request any notifications sent to them
     * @param {string} group Auth Group Id or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async getMyNotifications(group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20018>> {
        return AccountDashboardApiFp(this.configuration).getMyNotifications(group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query details about the organizations you have access to. They must be present on your token for this to work, which means the token was requested with the scope access or access::organization
     * @summary Allows a user to view detailed information about any organizations on their token
     * @param {string} group Auth Group Id or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async getMyOrgDetails(group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20017>> {
        return AccountDashboardApiFp(this.configuration).getMyOrgDetails(group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When an organization is applied to a user, it may be fully functional immediately (providing full access) or it may require the user to accept Terms of Access. This API allows the user to view the state of those organizations so the user can accept, decline or otherwise take action with regards to their account and information relative to organizations.
     * @summary Allows a user to view their account organizations and the state of those organizations
     * @param {string} group Auth Group Id or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async getMyOrgs(group: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20014>> {
        return AccountDashboardApiFp(this.configuration).getMyOrgs(group, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This will return an object array of all the b2c products the Auth Group has and all of the b2b products within the context of the organization. The data is derived from the token only.
     * @summary Allows a user to view all products within the context of one org to which they have access and can be linked
     * @param {string} group Auth Group Id or name
     * @param {string} org Organization context
     * @param {boolean} [includeCore] Include Core B2B products in returned list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async getMyProducts(group: string, org: string, includeCore?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20016>> {
        return AccountDashboardApiFp(this.configuration).getMyProducts(group, org, includeCore, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This API will return all of the access information available for a specific user. It is not recommended that anyone other than AuthGroup administrators be given permissions to this endpoint.
     * @summary Query the organizations, products, roles and permissions of a user
     * @param {string} group Auth Group Id or name
     * @param {string} id Unique user identifier
     * @param {string} [org] allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context
     * @param {string} [domain] if ID provided, it restricts the response to this domain
     * @param {string} [product] if ID provided, it restricts the response to this product
     * @param {boolean} [includeMiscRoles] these are roles attributed to the user that do not correlate to the domains or products provided access
     * @param {boolean} [excludePermissions] flag to let us know to return both roles and permissions, or just roles
     * @param {boolean} [minimized] if true, this creates arrays of ids in string form to reduce the size of the data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async getUserAccess(group: string, id: string, org?: string, domain?: string, product?: string, includeMiscRoles?: boolean, excludePermissions?: boolean, minimized?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20013>> {
        return AccountDashboardApiFp(this.configuration).getUserAccess(group, id, org, domain, product, includeMiscRoles, excludePermissions, minimized, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Even though the Organization Account Profile is controlled by the Org, Accounts can still see that the org has their data and request that data be removed at any time. Use this API to request the removal or clear the request. You can reference yourself with 'me' or if you have permissions, any Account ID.
     * @summary As an Account holder, request that an Organization delete your Org Profile, regardless of your access
     * @param {AccountIdBody} body Profile data request to the Organization
     * @param {string} group the auth group ID associated to your business account
     * @param {string} org the organization ID
     * @param {string} id your Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDashboardApi
     */
    public async requestToOrgProfile(body: AccountIdBody, group: string, org: string, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20011>> {
        return AccountDashboardApiFp(this.configuration).requestToOrgProfile(body, group, org, id, options).then((request) => request(this.axios, this.basePath));
    }
}
